<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>战忽包子の小窝</title>
  
  
  <link href="https://darksheep404.github.io/atom.xml" rel="self"/>
  
  <link href="https://darksheep404.github.io/"/>
  <updated>2025-05-27T11:20:30.780Z</updated>
  <id>https://darksheep404.github.io/</id>
  
  <author>
    <name>darksheep</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nvm-windows nvm install not work</title>
    <link href="https://darksheep404.github.io/2025/01/06/nvm-windows-install-not-work/"/>
    <id>https://darksheep404.github.io/2025/01/06/nvm-windows-install-not-work/</id>
    <published>2025-01-06T23:20:18.000Z</published>
    <updated>2025-05-27T11:20:30.780Z</updated>
    
    <content type="html"><![CDATA[<h3 id="nvm-windows-nvm-install-not-work"><a href="#nvm-windows-nvm-install-not-work" class="headerlink" title="nvm-windows nvm install not work"></a>nvm-windows nvm install not work</h3><p>毕业后买的新电脑环境不多,最近折腾博客要升级node,想从node换成nvm,结果一直遇到奇怪问题<br>nvm-window 安装的nvm install success后 nvm list为空<code>No installations recognized.</code>,且nvm use 报错  <code>nvm use 18.16.0</code><br><code>activation error: Version not installed.</code> </p><blockquote><p>2025年1月6日23:45:09</p></blockquote><p>原因如下(1.22版本前装在非C盘会存在此问题),使用更新版本或者装在C盘可解</p><p><code>nvm debug</code>可以查看当前版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\xxx&gt;nvm debug<br>xxx is not using admin or elevated rights.<br><br>Windows Version:        10.0 (Build 22631)<br><br>Windows Developer Mode: UNKNOWN<br><br>NVM4W Version:          1.2.0<br></code></pre></td></tr></table></figure><p>在<a href="https://github.com/coreybutler/nvm-windows/issues/979">nvm list shows node version but nvm use claims its not installed</a>中发现</p><p><a href="https://github.com/coreybutler/nvm-windows/wiki/Common-Issues">https://github.com/coreybutler/nvm-windows/wiki/Common-Issues</a></p><p>原怀疑 nodejs未卸载干净, 但是全局搜nodejs文件夹未发现安装,且node命令未识别,但是发现形似nvm&#x2F;local&#x2F;tmp的文件下有下载的<code>node 18.16.0</code>文件夹</p><blockquote><p>NVM for Windows used Go’s <a href="https://pkg.go.dev/os#Rename">os.Rename</a> to move files from temporary directories to the final installation directory. Thanks to explorations with <a href="https://github.com/thadguidry">@thadguidry</a> in <a href="https://github.com/coreybutler/nvm-windows/issues/1198">#1198</a> and <a href="https://github.com/coreybutler/nvm-windows/issues/1206">#1206</a>, we realized this function fails silently when attempting to move files across different hard drive volumes (like <code>C:\</code> and <code>E:\</code>). NVM for Windows uses Go’s wonderful support for temporary directories to process installations, which use the primary volume (usually <code>C:\</code>). If you are using a different volume for your NVM for Windows installation, it would be subject to this nuance of the <code>os.Rename</code> method.<br>NVM for Windows使用Go的<a href="https://pkg.go.dev/os#Rename">os. config</a>将文件从临时目录移动到最终安装目录。感谢<a href="https://github.com/thadguidry">@thadguidry</a>在<a href="https://github.com/coreybutler/nvm-windows/issues/1198">#1198</a>和<a href="https://github.com/coreybutler/nvm-windows/issues/1206">#1206</a>中的探索，我们意识到当尝试在不同的硬盘驱动器卷（如<code>C:\</code>和<code>E:\</code>）中移动文件时，此功能会默默失败。Windows版NVM使用Go对临时目录的出色支持来处理安装，该安装使用主卷（通常是<code>C:\</code>）。如果您正在使用不同的卷进行NVM for Windows安装，则会受到<code>os.Rename</code>方法的这种细微差别的影响。</p><p>At the time of this writing, a preliminary fix has been created. It is scheduled for release in v1.2.2 after we finalize testing. In the interim, users will need to install NVM for Windows on their C drive.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;nvm-windows-nvm-install-not-work&quot;&gt;&lt;a href=&quot;#nvm-windows-nvm-install-not-work&quot; class=&quot;headerlink&quot; title=&quot;nvm-windows nvm install not </summary>
      
    
    
    
    <category term="环境配置" scheme="https://darksheep404.github.io/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>2024年终总结</title>
    <link href="https://darksheep404.github.io/2025/01/01/2024/"/>
    <id>https://darksheep404.github.io/2025/01/01/2024/</id>
    <published>2025-01-01T12:20:18.000Z</published>
    <updated>2025-05-27T11:20:30.779Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2024年度总结"><a href="#2024年度总结" class="headerlink" title="2024年度总结"></a><a href="https://darksheep.xyz/demo-2025/2024/">2024年度总结</a></h3><p><a href="https://darksheep.xyz/demo-2025/2024/">2024年度总结</a></p>]]></content>
    
    
    <summary type="html">2024年终总结</summary>
    
    
    
    <category term="demo" scheme="https://darksheep404.github.io/categories/demo/"/>
    
    
    <category term="demo" scheme="https://darksheep404.github.io/tags/demo/"/>
    
  </entry>
  
  <entry>
    <title>k8s笔记</title>
    <link href="https://darksheep404.github.io/2024/11/23/k8s%E7%AC%94%E8%AE%B0/"/>
    <id>https://darksheep404.github.io/2024/11/23/k8s%E7%AC%94%E8%AE%B0/</id>
    <published>2024-11-23T15:20:18.000Z</published>
    <updated>2025-05-27T11:20:30.779Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20230521213417394.png" alt="image-20230521213417394"></p><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20230521213437099.png" alt="image-20230521213437099"></p><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20230521213456098.png" alt="image-20230521213456098"></p><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20230521213544895.png" alt="image-20230521213544895"></p><h2 id="K8S的对象"><a href="#K8S的对象" class="headerlink" title="K8S的对象"></a>K8S的对象</h2><p><img src="https://static001.geekbang.org/resource/image/b5/cf/b5a7003788cb6f2b1c5c4f6873a8b5cf.jpg?wh=1920x1298" alt="img"></p><h3 id="离线业务-gt-临时任务-gt-只跑一次-job-定时任务-cronjob"><a href="#离线业务-gt-临时任务-gt-只跑一次-job-定时任务-cronjob" class="headerlink" title="离线业务-&gt;临时任务-&gt;只跑一次:job,定时任务:cronjob"></a>离线业务-&gt;临时任务-&gt;只跑一次:job,定时任务:cronjob</h3><p><strong>一些字段</strong><br>activeDeadlineSeconds，设置 Pod 运行的超时时间。</p><p>backoffLimit，设置 Pod 的失败重试次数。</p><p>completions，Job 完成需要运行多少个 Pod，默认是 1 个。</p><p>parallelism，它与 completions 相关，表示允许并发运行的 Pod 数量，避免过多占用资源。</p><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20230521214214049.png" alt="image-20230521214214049"></p><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/9b780905a824d2103d4ayyc79267ae28.jpg" alt="img"><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/yy352c661ae37dd116dd12c61932b43c.jpg" alt="img"></p><h3 id="ConfigMap-x2F-Secret-明文-x2F-秘文配置信息"><a href="#ConfigMap-x2F-Secret-明文-x2F-秘文配置信息" class="headerlink" title="ConfigMap&#x2F;Secret:明文&#x2F;秘文配置信息"></a>ConfigMap&#x2F;Secret:明文&#x2F;秘文配置信息</h3><blockquote><p>不是容器 不需要spec字段说明允许规格</p><p>containers”里有一个“env”，它定义了 Pod 里容器能够看到的环境变量</p><p>可以使用了简单的“value”，把环境变量的值写“死”在了 YAML 里</p><p>实际上它还可以使用另一个“valueFrom”字段，从 ConfigMap 或者 Secret 对象里获取值</p><ul><li>name”字段是 API 对象的名字，而不是 Key-Value 的名字。</li></ul></blockquote><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/0663d692b33c1dee5b08e486d271b69d.jpg" alt="img"></p><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20230521214405793.png" alt="image-20230521214405793"></p><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20230521214605773.png" alt="image-20230521214605773"></p><h3 id="Deployment-管理pod-gt-pod管理container"><a href="#Deployment-管理pod-gt-pod管理container" class="headerlink" title="Deployment:管理pod-&gt;pod管理container"></a>Deployment:管理pod-&gt;pod管理container</h3><h4 id="DaemonSet-spec-里没有-replicas-字段-在每个节点上只创建出一个-Pod-实例"><a href="#DaemonSet-spec-里没有-replicas-字段-在每个节点上只创建出一个-Pod-实例" class="headerlink" title="DaemonSet (spec 里没有 replicas 字段)在每个节点上只创建出一个 Pod 实例"></a>DaemonSet (spec 里没有 replicas 字段)在<strong>每个节点上只创建出一个 Pod 实例</strong></h4><p>如需要运行在master node上 需要设置污点&#x2F;容忍度 taint:tolerations</p><p><img src="https://static001.geekbang.org/resource/image/c1/1c/c1dee411aa02f4ff2b8caaf0bd627a1c.jpg?wh=1920x1173" alt="img"></p><h4 id="StatefulSet"><a href="#StatefulSet" class="headerlink" title="StatefulSet"></a>StatefulSet</h4><blockquote><p>专门部署“有状态应用”的 API 对象 StatefulSet，它与 Deployment 非常相似，区别是由它管理的 Pod 会有固定的名字、启动顺序和网络标识，这些特性对于在集群里实施有主从、主备等关系的应用非常重要</p></blockquote><p><img src="https://static001.geekbang.org/resource/image/71/88/71b485401dca6946fe4788fa97e3fd88.png?wh=1268x414" alt="img"></p><blockquote><p><strong>所管理的 Pod 不再是随机的名字了，而是有了顺序编号</strong>，从 0 开始分别被命名为 redis-sts-0、redis-sts-1，Kubernetes 也会按照这个顺序依次创建（0 号比 1 号的 AGE 要长一点），这就解决了“<strong>有状态应用”的第一个问题：启动顺序</strong></p><p><strong>有了这个唯一的名字，应用就可以自行决定依赖关系了</strong>，</p><p>如以 Redis 为例子里，就可以让先启动的 0 号 Pod 是主实例，后启动的 1 号 Pod 是从实例</p><p>Service 自己会有一个域名，格式是“对象名. 名字空间”，当我们把 Service 对象应用于 StatefulSet 的时候,<strong>会为 Pod 再多创建出一个新的域名，格式是“Pod 名. 服务名. 名字空间.svc.cluster.local”&#x2F;“Pod 名. 服务名</strong>”</p><p>外部的客户端只要知道了 StatefulSet 对象，就<strong>可以用固定的编号去访问某个具体的Pod了，虽然 Pod 的 IP 地址可能会变，但这个有编号的域名由 Service 对象维护，是稳定不变的</strong></p></blockquote><p><img src="https://static001.geekbang.org/resource/image/1a/0f/1a06987c87f3db948b591883a81bac0f.jpg?wh=4000x2946" alt="img"></p><h3 id="Service与Ingress"><a href="#Service与Ingress" class="headerlink" title="Service与Ingress"></a>Service与Ingress</h3><blockquote><p>不再关心 Pod 的具体地址，只要访问 Service 的固定 IP 地址</p></blockquote><p><img src="https://static001.geekbang.org/resource/image/0f/64/0f74ae3a71a6a661376698e481903d64.jpg?wh=1920x1322" alt="img"></p><h4 id="ingress-集群内外边界上的入口"><a href="#ingress-集群内外边界上的入口" class="headerlink" title="ingress:集群内外边界上的入口"></a>ingress:集群内外边界上的入口</h4><blockquote><p>Ingress 的路由规则是 HTTP 协议，所以就不能用 IP 地址的方式访问，必须要用域名、URI</p></blockquote><p><img src="https://static001.geekbang.org/resource/image/e6/55/e6ce31b027ba2a8d94cdc553a2c97255.png?wh=1288x834" alt="img"></p><h4 id="四者联系"><a href="#四者联系" class="headerlink" title="四者联系"></a>四者联系</h4><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/bb7a911e10c103fb839e01438e184914.jpg" alt="img"></p><h2 id="几种更新策略"><a href="#几种更新策略" class="headerlink" title="几种更新策略"></a>几种更新策略</h2><blockquote><p>普通部署 全部停掉 然后全部启动新的</p><p>用时最短</p></blockquote><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20230521220007395.png" alt="image-20230521220007395"></p><h3 id="滚动更新"><a href="#滚动更新" class="headerlink" title="滚动更新"></a>滚动更新</h3><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20230521220049973.png" alt="image-20230521220049973"></p><h3 id="蓝绿部署"><a href="#蓝绿部署" class="headerlink" title="蓝绿部署"></a>蓝绿部署</h3><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20230521220049973.png"></p><p>金丝雀发布</p><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20230521220129212.png" alt="image-20230521220129212"></p><h2 id="应用更健康"><a href="#应用更健康" class="headerlink" title="应用更健康"></a>应用更健康</h2><blockquote><p>创建容器有三大隔离技术：namespace、cgroup、chroot。其中的 namespace 实现了独立的进程空间，chroot 实现了独立的文件系统,cgroup 的作用是管控 CPU、内存，保证容器不会无节制地占用基础资源，进而影响到系统里的其他应用</p></blockquote><h3 id="cgroup"><a href="#cgroup" class="headerlink" title="cgroup"></a>cgroup</h3><p>CPU、内存与存储卷,在 Pod 容器的描述部分添加一个新字段 resources 进行申请，它就相当于申请资源的 Claim</p><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20230521221149186.png" alt="image-20230521221149186"></p><blockquote><p>Kubernetes 里 CPU 的最小使用单位是 0.001，为了方便表示用了一个特别的单位 m，也就是“milli”“毫”的意思，比如说 500m 就相当于 0.5</p></blockquote><h3 id="容器状态探针-Probe"><a href="#容器状态探针-Probe" class="headerlink" title="容器状态探针(Probe)"></a>容器状态探针(Probe)</h3><blockquote><p> 除了保证崩溃重启，还必须要能够探查到 Pod 的内部运行状态，定时给应用做“体检”，让应用时刻保持“健康”，能够满负荷稳定工作</p></blockquote><ul><li><p>Startup，启动探针，用来检查应用是否已经启动成功，适合那些有大量初始化工作要做，启动很慢的应用。</p></li><li><p>Liveness，存活探针，用来检查应用是否正常运行，是否存在死锁、死循环。</p></li><li><p>Readiness，就绪探针，用来检查应用是否可以接收流量，是否能够对外提供服务</p></li></ul><p><img src="https://static001.geekbang.org/resource/image/64/d9/64fde55dd2eab68f9968ff34218646d9.jpg?wh=1920x1200" alt="img"></p><h4 id="探测方式"><a href="#探测方式" class="headerlink" title="探测方式"></a>探测方式</h4><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20230521221515092.png" alt="image-20230521221515092"></p><blockquote><p>启用了 80 端口，然后用 location 指令定义了 HTTP 路径 &#x2F;ready，它作为对外暴露的“检查口”，用来检测就绪状态，返回简单的 200 状态码和一个字符串表示工作正常</p></blockquote><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20230521221701080.png" alt="image-20230521221701080"></p><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20230521221605863.png" alt="image-20230521221605863"></p><h3 id="namespace-通过不同命名空间实现资源隔离"><a href="#namespace-通过不同命名空间实现资源隔离" class="headerlink" title="namespace:通过不同命名空间实现资源隔离"></a>namespace:通过不同命名空间实现资源隔离</h3><blockquote><p>可以像管理容器一样，给名字空间设定配额，把整个集群的计算资源分割成不同的大小，按需分配给团队或项目使用</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20230521213417394.png&quot; alt=&quot;image-20230521213417394&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>越南旅游</title>
    <link href="https://darksheep404.github.io/2024/10/23/%E8%B6%8A%E5%8D%97%E6%97%85%E6%B8%B8/"/>
    <id>https://darksheep404.github.io/2024/10/23/%E8%B6%8A%E5%8D%97%E6%97%85%E6%B8%B8/</id>
    <published>2024-10-23T15:20:18.000Z</published>
    <updated>2025-05-27T11:20:30.780Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><blockquote><p>护照,信用卡,签注</p></blockquote><h3 id="护照申请"><a href="#护照申请" class="headerlink" title="护照申请"></a>护照申请</h3><blockquote><p>微信 珠海公安&#x3D;&gt;出入境办理预约<br>经常约满,需要早点约,不过也有机会捡漏,</p></blockquote><h3 id="VISA信用卡办理"><a href="#VISA信用卡办理" class="headerlink" title="VISA信用卡办理"></a>VISA信用卡办理</h3><p>园区中国银行可办,我选了多币种卡,可以扣港币,越南盾,用美元还款,可以自己买美元还&#x2F;到期自动扣汇率对应人民币</p><h3 id="越南签证申请"><a href="#越南签证申请" class="headerlink" title="越南签证申请"></a>越南签证申请</h3><blockquote><p>电子签是PDF,要自行打印,需要在口岸换成另纸签</p><p>过关的时候会有旅行公司骗你200人民币打印费,但是可以带着你插队<br>花费 电子签注25美元 (180RMB)<br><strong>付款需要visa</strong></p></blockquote><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20240423185040446.png" alt="image-20240423185040446"></p><h3 id="越南手机卡"><a href="#越南手机卡" class="headerlink" title="越南手机卡"></a>越南手机卡</h3><blockquote><p>淘宝或者口岸现买均可</p></blockquote><h3 id="开通手机卡境外收短信功能"><a href="#开通手机卡境外收短信功能" class="headerlink" title="开通手机卡境外收短信功能"></a>开通手机卡境外收短信功能</h3><blockquote><p>默认关闭,在境外收不到验证码</p><p>不要往国内发短信,会被封号 要拿身份证照片解封</p></blockquote><h3 id="现金"><a href="#现金" class="headerlink" title="现金"></a>现金</h3><blockquote><p>口岸兑换 或者 ATM visa取款,特定银行 取款</p></blockquote><h2 id="衣食住行"><a href="#衣食住行" class="headerlink" title="衣食住行"></a>衣食住行</h2><p>衣服:短袖+薄外套+找有洗衣机烘干机的民宿</p><p>吃饭:路边摊<br>出行:<strong>grab</strong> 打车软件(汽车+摩的)+<strong>google maps</strong></p><p>住宿:Agoda(酒店),爱彼迎(民宿)<br><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20240423210713409.png" alt="image-20240423210713409"></p><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20240423210648254.png" alt="image-20240423210648254"></p><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20240423210739200.png" alt="image-20240423210739200"></p><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20240423210757873.png" alt="image-20240423210757873"></p><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20240423210830993.png" alt="image-20240423210830993"></p><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20240423210845351.png" alt="image-20240423210845351"></p><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20240423210901702.png" alt="image-20240423210901702"></p><h2 id="景点"><a href="#景点" class="headerlink" title="景点"></a>景点</h2><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20240423190747489.png" alt="image-20240423190747489"></p><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20240423190625758.png" alt="image-20240423190625758"></p><h3 id="博物馆"><a href="#博物馆" class="headerlink" title="博物馆"></a>博物馆</h3><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20240423191601488.png" alt="image-20240423191601488"></p><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20240423192012006.png" alt="image-20240423192012006"></p><h3 id="中越"><a href="#中越" class="headerlink" title="中越"></a>中越</h3><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20240423211020461.png" alt="image-20240423211020461"></p><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20240423211035296.png" alt="image-20240423211035296"></p><p><strong>共产主义+儒家文化+法国殖民色彩+越南风情</strong><br><strong>两千年来持续千年的北属时期(郡县制直辖)</strong></p><p>第一,二次:秦汉到魏晋南北朝,(期间有三年,二佂夫人起义,被伏波将军马援平定[三国马超祖先])</p><p>第三次:隋唐</p><p>(流放地之一,如 杜审言[杜甫祖父],王勃都被流放到交州下面的郡县)</p><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20240423192351882.png" alt="image-20240423192351882"></p><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20240423192544159.png" alt="image-20240423192544159"></p><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20240423195533680.png" alt="image-20240423195533680"></p><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20240423195556216.png" alt="image-20240423195556216"></p><h3 id="二战结束后"><a href="#二战结束后" class="headerlink" title="二战结束后"></a>二战结束后</h3><blockquote><p>越南与湛江</p></blockquote><p><strong>越南北纬16度线&#x3D;&gt;南越与北越</strong></p><blockquote><p>英国带领把法国外籍军团的步兵+战俘营法军占领越南南部</p><p>中华民国第一方面军受降及接管越南北方,在北纬16度线上封锁法军北上的道路,支持越南国民党与越南共产党组成北越第一届内阁</p></blockquote><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20240423203300992.png" alt="image-20240423203300992"><br>《七子之歌》&#x3D;&#x3D;&gt;<strong>广州湾</strong>(湛江市),澳门、香港、台湾、威海卫、广州湾、九龙岛和旅大</p><blockquote><p>中法政府于1946年2月28日达成协议<br>&#x3D;&#x3D;&gt;中国将北越军事行政权移交给法国</p><ul><li>法国交还广州湾(现湛江市)</li><li>承担中国军队入越军费</li><li>中国无偿收回滇越铁路雲南段</li></ul><blockquote><p>条约签订后<br>法军在海防要求提前登陆,与53军130师发生军事冲突,被击沉军舰一艘,击伤两艘,伤亡五百余人,中国军队仅十几人轻伤</p><p>法国舰队中将司令举白旗要求停火</p></blockquote></blockquote><ul><li>越南抗法战争</li><li>越南抗美战争</li><li>对越自卫反击战(1979年到1989年近十年间的中越边境冲突)</li></ul><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/image-20240423211050818.png" alt="image-20240423211050818"></p><h2 id="越南遇见的国人"><a href="#越南遇见的国人" class="headerlink" title="越南遇见的国人"></a>越南遇见的国人</h2><ul><li>深圳富士康去越南北宁富士康出差的老哥</li><li>四处旅游的广州土著(ins大佬,语言能力很强,旅行很local化)</li><li>去河内开小店铺的不会越南语的边民</li><li>报了越南语夜校的做生意的老板</li></ul><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><h4 id="视频1-越南路边摊买东西-真正的世界语言-x3D-gt-肢体语言"><a href="#视频1-越南路边摊买东西-真正的世界语言-x3D-gt-肢体语言" class="headerlink" title="视频1:越南路边摊买东西(真正的世界语言&#x3D;&gt;肢体语言)"></a>视频1:越南路边摊买东西(真正的世界语言&#x3D;&gt;肢体语言)</h4><h4 id="视频2-还剑湖夜晚路边弹唱与踢毽子的学生们"><a href="#视频2-还剑湖夜晚路边弹唱与踢毽子的学生们" class="headerlink" title="视频2:还剑湖夜晚路边弹唱与踢毽子的学生们"></a>视频2:还剑湖夜晚路边弹唱与踢毽子的学生们</h4><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.krzzjn.com/show-531-112251.html">抗战胜利国军入越受降与法国斗争始末</a></p><p><a href="https://zh.wikipedia.org/wiki/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%8D%B0%E5%BA%A6%E6%94%AF%E9%82%A3%E6%88%B0%E7%88%AD">第一次印度支那战争WIKI</a></p><p><a href="https://zh.wikipedia.org/wiki/%E8%B6%8A%E5%8D%97%E6%88%98%E4%BA%89">越南战争WIKI</a></p><p><a href="https://sites.google.com/view/minhvien-yaohan/%E8%B6%8A%E5%8D%97%E7%9F%A5%E5%A4%9A%E5%B0%91/%E7%9F%A5%E5%A4%9A%E5%B0%91%E4%B9%8B21-40/%E8%B6%8A%E5%8D%97%E7%9F%A5%E5%A4%9A%E5%B0%91-31">越南知多少-越南西贡大学陆礼强</a></p><p><a href="https://www.tapafun.com/share/%E8%B6%8A%E5%8D%97%E5%8D%8E%E4%BA%BA%E6%95%85%E4%BA%8B/">越南华人故事-海虹号陆礼强</a></p><p><a href="https://sites.google.com/view/minhvien-yaohan/%E6%BC%AB%E8%B0%88%E5%BE%B7%E5%9B%BD%E8%A7%81%E9%97%BB/%E6%BC%AB%E8%B0%88%E5%BE%B7%E5%9B%BD%E8%A7%81%E9%97%BB-01?authuser=0">陆礼强德国日记&#x3D;&gt;1978年海虹号难民被西德接收,85年左右毕业在银行编写电脑程序</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;护照,信用卡,签注&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;护照申请&quot;&gt;&lt;a href</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Sealos使用</title>
    <link href="https://darksheep404.github.io/2024/09/23/Sealos%E4%BD%BF%E7%94%A8/"/>
    <id>https://darksheep404.github.io/2024/09/23/Sealos%E4%BD%BF%E7%94%A8/</id>
    <published>2024-09-23T15:20:18.000Z</published>
    <updated>2025-05-27T11:20:30.779Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://cloud.sealos.io/">https://cloud.sealos.io/</a></p><h3 id="使用sealos选择nginx-docker镜像部署"><a href="#使用sealos选择nginx-docker镜像部署" class="headerlink" title="使用sealos选择nginx docker镜像部署"></a>使用sealos选择nginx docker镜像部署</h3><p>修改k8s部署的nginx image内部的nginx.conf来添加proxy_pass</p><p>需要在外部编写一个nginx.conf,覆盖掉镜像内部的nginx.conf</p><p><strong>在k8s中,可以使用把编写的nginx.conf放到 configMap内 随后用configMap的内容挂载到nginx容器内覆盖掉configMap</strong></p><blockquote><p>gui <code>新增配置文件</code>创建后 实际生成了<code>configMap</code></p></blockquote><p><code>configmap.yaml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-test</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">etcvn-nginxvn-nginxvn-conf:</span> <span class="hljs-string">|-</span><br><span class="hljs-string">    user  nginx;</span><br><span class="hljs-string">    worker_processes  auto;</span><br><span class="hljs-string"></span><br>    <span class="hljs-string">error_log</span>  <span class="hljs-string">/var/log/nginx/error.log</span> <span class="hljs-string">notice;</span><br>    <span class="hljs-string">pid</span>        <span class="hljs-string">/var/run/nginx.pid;</span><br><span class="hljs-string">...省略其他配置内容</span><br></code></pre></td></tr></table></figure><p><code>deployment.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-test</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx-test</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">revisionHistoryLimit:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">nginx-test</span><br><span class="hljs-string">...</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">automountServiceAccountToken:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-test</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>      <span class="hljs-string">...</span><br>          <span class="hljs-attr">volumeMounts:</span> <span class="hljs-comment">#容器挂载配置</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">etcvn-nginxvn-nginxvn-conf</span> <span class="hljs-comment">#对应vloume名称</span><br>              <span class="hljs-attr">mountPath:</span> <span class="hljs-string">etc/nginx/nginx.conf</span> <span class="hljs-comment">#挂载到容器的的路径</span><br>              <span class="hljs-attr">subPath:</span> <span class="hljs-string">./etc/nginx/nginx.conf</span> <span class="hljs-comment">#只挂载vloume中特定文件,而非整个目录 </span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">etcvn-nginxvn-nginxvn-conf</span> <span class="hljs-comment">#volume 定义的卷的名称</span><br>          <span class="hljs-attr">configMap:</span> <span class="hljs-comment">#vloume</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-test</span> <span class="hljs-comment">#configMap的名称</span><br>            <span class="hljs-attr">items:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">etcvn-nginxvn-nginxvn-conf</span> <span class="hljs-comment">#configMap中数据项的key</span><br>                <span class="hljs-attr">path:</span> <span class="hljs-string">./etc/nginx/nginx.conf</span> <span class="hljs-comment">#数据项在卷中路径</span><br></code></pre></td></tr></table></figure><blockquote><p>原gui 新建的名字即为挂载到容器中的路径,需要修改为etc&#x2F;nginx&#x2F;nginx.conf</p></blockquote><p><code>kubectl edit deployment nginx-test</code> 进入编辑模式</p><p>按<code>Insert</code> 进入编辑</p><p><code>Esc</code> 退出编辑,进入命令模式 <code>:wq</code> 保存并退出 <code>:q</code> 不保存退出</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://cloud.sealos.io/&quot;&gt;https://cloud.sealos.io/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用sealos选择nginx-docker镜像部署&quot;&gt;&lt;a href=&quot;#使用sealos选择nginx-docker镜</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>css伪类,伪元素选择器</title>
    <link href="https://darksheep404.github.io/2024/05/08/css%E4%BC%AA%E7%B1%BB,%E4%BC%AA%E5%85%83%E7%B4%A0%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>https://darksheep404.github.io/2024/05/08/css%E4%BC%AA%E7%B1%BB,%E4%BC%AA%E5%85%83%E7%B4%A0%E9%80%89%E6%8B%A9%E5%99%A8/</id>
    <published>2024-05-08T12:20:18.000Z</published>
    <updated>2025-05-27T11:20:30.779Z</updated>
    
    <content type="html"><![CDATA[<p>#css<br><code>::</code>即为伪类选择器</p><h2 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h2><blockquote><h2 id="7-伪元素选择器"><a href="#7-伪元素选择器" class="headerlink" title="7. 伪元素选择器"></a>7. 伪元素选择器</h2><p><code>伪元素，表示页面中一些特殊的并不真实的存在的元素（特殊的位置）</code></p><p>伪元素使用<code>::</code>开头</p><ul><li><p><code>::first-letter</code> 表示第一个字母</p></li><li><p><code>::first-line</code> 表示第一行</p></li><li><p><code>::selection</code> 表示选中的内容</p></li><li><p><code>::before</code> 元素的开始</p></li><li><p><code>::after</code> 元素的最后</p></li><li><p><code>::before</code>和<code>::after</code> 必须结合<code>content</code>属性来使用</p></li></ul></blockquote><h3 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 段落首字母设置大小为30px */</span><br><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">::first-letter</span>&#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;<br>&#125;<br><br><span class="hljs-comment">/* 段落第一行设置为黄色背景 */</span><br><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">::first-line</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: yellow;<br>&#125;<br><br><span class="hljs-comment">/* 段落选中的部分变绿色 */</span><br><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">::selection</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: green；<br>&#125;<br><br><span class="hljs-comment">/* div前加上内容 */</span><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::before</span>&#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;BEFORE&#x27;</span>;<br>    <span class="hljs-attribute">color</span>: red;<br>&#125;<br><br><span class="hljs-comment">/* div后加上内容 */</span><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::after</span>&#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;AFTER&#x27;</span>;<br>    <span class="hljs-attribute">color</span>: blue;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="伪类-元素特殊状态一般-开头"><a href="#伪类-元素特殊状态一般-开头" class="headerlink" title="伪类:元素特殊状态一般: 开头"></a>伪类:元素特殊状态一般<code>:</code> 开头</h2><blockquote><p>伪类一般情况下都是使用<code>:</code>开头</p><ul><li><p><code>:first-child</code> 第一个子元素</p></li><li><p><code>:last-child</code> 最后一个子元素</p></li><li><p><code>:nth-child()</code> 选中第n个子元素 </p></li><li><ul><li>n：第n个，n的范围0到正无穷</li></ul></li><li><ul><li>2n或even：选中偶数位的元素</li></ul></li><li><ul><li>2n+1或odd：选中奇数位的元素</li></ul></li></ul><p>以上这些伪类都是根据所有的子元素进行排序的</p><ul><li><p><code>:first-of-type</code> 同类型中的第一个子元素</p></li><li><p><code>:last-of-type</code> 同类型中的最后一个子元素</p></li><li><p><code>:nth-of-type()</code> 选中同类型中的第n个子元素</p></li></ul><p>这几个伪类的功能和上述的类似，不同点是他们是在同类型元素中进行排序的</p><ul><li><p><code>:not()</code>否定伪类，将符合条件的元素从选择器中去除</p></li><li><p><code>:link</code> 未访问的链接</p></li><li><p><code>:visited</code> 已访问的链接 </p></li><li><ul><li>由于隐私的原因，所以<code>visited</code>这个伪类只能修改链接的颜色</li></ul></li><li><p><code>:hover</code> 鼠标悬停的链接</p></li><li><p><code>:active</code> 鼠标点击的链接</p></li></ul></blockquote><h3 id="代码片段-1"><a href="#代码片段-1" class="headerlink" title="代码片段"></a>代码片段</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* ul下所有li，黑色 */</span><br><span class="hljs-selector-tag">ul</span>&gt;<span class="hljs-selector-tag">li</span> &#123;<br>    <span class="hljs-attribute">color</span>: black;<br>&#125;<br><br><span class="hljs-comment">/* ul下第偶数个li，黄色 */</span><br><span class="hljs-selector-tag">ul</span>&gt;<span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>n) &#123;<br>    <span class="hljs-attribute">color</span>: yellow;<br>&#125;<br><br><span class="hljs-comment">/* ul下第奇数个li，绿色 */</span><br><span class="hljs-selector-tag">ul</span>&gt;<span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(odd) &#123;<br>    <span class="hljs-attribute">color</span>: green;<br>&#125;<br><br><span class="hljs-comment">/* ul下第一个li，红色 */</span><br><span class="hljs-selector-tag">ul</span>&gt;<span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:first</span>-child &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>&#125;<br><br><span class="hljs-comment">/* ul下最后一个li，黄色 */</span><br><span class="hljs-selector-tag">ul</span>&gt;<span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:last-child</span> &#123;<br>    <span class="hljs-attribute">color</span>: orange;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* unvisited link */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br><br><span class="hljs-comment">/* visited link */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> &#123;<br>  <span class="hljs-attribute">color</span>: yellow;<br>&#125;<br><br><span class="hljs-comment">/* mouse over link */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">color</span>: green;<br>&#125;<br><br><span class="hljs-comment">/* selected link */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span> &#123;<br>  <span class="hljs-attribute">color</span>: blue;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#css&lt;br&gt;&lt;code&gt;::&lt;/code&gt;即为伪类选择器&lt;/p&gt;
&lt;h2 id=&quot;伪元素选择器&quot;&gt;&lt;a href=&quot;#伪元素选择器&quot; class=&quot;headerlink&quot; title=&quot;伪元素选择器&quot;&gt;&lt;/a&gt;伪元素选择器&lt;/h2&gt;&lt;blockquote&gt;
&lt;h2 id</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>结合el-dialog使用.sync和vuex</title>
    <link href="https://darksheep404.github.io/2024/05/02/%E7%BB%93%E5%90%88el-dialog%E4%BD%BF%E7%94%A8.sync%E5%92%8Cvuex/"/>
    <id>https://darksheep404.github.io/2024/05/02/%E7%BB%93%E5%90%88el-dialog%E4%BD%BF%E7%94%A8.sync%E5%92%8Cvuex/</id>
    <published>2024-05-02T12:20:18.000Z</published>
    <updated>2025-05-27T11:20:30.780Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><blockquote><p>需要每次刷新页面或者切换页面时<br>调用api 查询是否需要弹窗<br>并弹出弹窗</p></blockquote><h4 id="监听-vue刷新或切换页面"><a href="#监听-vue刷新或切换页面" class="headerlink" title="监听 vue刷新或切换页面"></a>监听 vue刷新或切换页面</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">VueRouter</span>.<span class="hljs-title function_">afterEach</span>(<span class="hljs-function">() =&gt;</span> &#123;  <br>  <span class="hljs-keyword">if</span> (<span class="hljs-title class_">VueRouter</span>.<span class="hljs-property">app</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">getters</span>.<span class="hljs-property">token</span>) &#123;  <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;%c用户刷新&#x27;</span>, <span class="hljs-string">&#x27;color:white;background:blue;font-weight: bold;&#x27;</span>)<br>    <span class="hljs-comment">//check中 调用set 将返回值设置进vuex中  </span><br>    <span class="hljs-title function_">checkNeedDialog</span>()  <br>  &#125;  <br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="dialog-sync-与vuex"><a href="#dialog-sync-与vuex" class="headerlink" title="dialog .sync 与vuex"></a>dialog .sync 与vuex</h3><blockquote><p>当需要在子组件中更新父组件传入的值时</p></blockquote><p>子组件应通过$emit提交事件,传入要更新的属性和新值<br><code>this.$emit(&#39;update:title&#39;, newTitle)</code><br>父组件监听事件并更新值<br><code>v-on:update:title=&quot;doc.title = $event</code><br>父组件中简写<br><code>v-bind:title.sync</code> 即<code>:title.sync</code></p><h3 id="实际实现"><a href="#实际实现" class="headerlink" title="实际实现"></a>实际实现</h3><h4 id="弹窗组件中"><a href="#弹窗组件中" class="headerlink" title="弹窗组件中"></a>弹窗组件中</h4><blockquote><p>控制弹窗是否可见的变量<br>由父组件传入<br>子组件通过计算属性 获取值</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-dialog  <br>  :visible=&quot;dialogVisible&quot;  &gt;<br>&lt;el-button @click=&quot;dialogVisible = false&quot;&gt;&#123;&#123; $t(&#x27;gotIt&#x27;) &#125;&#125;&lt;/el-button&gt;<br>&lt;/el-dialog&gt;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>: &#123;  <br>  <span class="hljs-attr">dialogVisible</span>: &#123;  <br>    <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;  <br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">visible</span>  <br>    &#125;,  <br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">val</span>) &#123;  <br>      <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;update:visible&#x27;</span>, val)  <br>    &#125;  <br>  &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="父组件使用时"><a href="#父组件使用时" class="headerlink" title="父组件使用时"></a>父组件使用时</h4><blockquote><p>组件上设置:visible.sync</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;share-notify :visible.sync = &quot;isShowShareDialog&quot;/&gt;<br><br></code></pre></td></tr></table></figure><blockquote><p>绑定的变量为计算属性<br>以上两处的计算属性因为除了get以外还需要set<br>所以要写成<code>xxx:&#123;&#125;</code>的格式<br>只有get的计算属性 则可以写成 <code>xxx()&#123;return xxx&#125;</code>的简写</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">isShowShareDialog</span>: &#123;  <br>  <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">user</span>.<span class="hljs-property">isShowEquoteShareDialog</span>  <br>  &#125;,  <br>  <span class="hljs-title function_">set</span>(<span class="hljs-params"></span>) &#123;  <br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;confirmEquoteShareDialog&#x27;</span>)  <br>  &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h4><blockquote><p>不过此例中,结合上述代码可以发现<br>不需要由父组件根据vuex中值 更新子组件的可见状态<br>直接子组件的<code>visible</code> 与vuex中数据绑定即可</p></blockquote><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://blog.csdn.net/zjpjay/article/details/113992083">:visible.sync 的作用_卡卡西Sensei的博客-CSDN博客_:visible.sync</a><br><a href="https://v2.cn.vuejs.org/v2/guide/components-custom-events.html#sync-%E4%BF%AE%E9%A5%B0%E7%AC%A6">.sync修饰符 — Vue.js</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;需要每次刷新页面或者切换页面时&lt;br&gt;调用api 查询是否需要弹窗&lt;br&gt;并弹出弹窗&lt;/p&gt;
&lt;/blockquo</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>24-Week4-April</title>
    <link href="https://darksheep404.github.io/2024/04/28/24-Week4-April/"/>
    <id>https://darksheep404.github.io/2024/04/28/24-Week4-April/</id>
    <published>2024-04-28T15:20:18.000Z</published>
    <updated>2025-05-27T11:20:30.779Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>24-4.22~4.28</p></blockquote><p>[TOC]</p><p>周末是一如既往的睡到下午,然后在床上躺着不想起床的情况</p><p>活动为<br>刷B站+看小说+淘宝闲鱼+小红书</p><p>#硬件DIY</p><p><a href="https://www.bilibili.com/video/BV1ND421T7nB">99元低成本搭建docker服务器</a></p><p>#影视作品</p><p>怀旧向_关于年轻时动画片的评论,喜羊羊,猪猪侠这些_猪猪侠和蓝弧后面坐了洛洛历险记&#x2F;超兽武装?_动漫公司多来自广东</p><p>#旅游</p><p><a href="https://www.bilibili.com/video/BV1UZ42187Ho?spm_id_from=333.880.my_history.page.click"><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/d21bdb0b22f2c5bc2ff31878728c93a367239c4a.jpg@160w_100h_1c.webp" alt="img"></a></p><p><a href="https://www.bilibili.com/video/BV1UZ42187Ho">一个月300，如何在浙江安吉摆烂？【小城市旅居报告2】</a></p><blockquote><p>数字游民形式_但是房租很贵能到两千+,吃的也贵,分几个园区,感觉不会去_老园区会有小团体问题,新园区还好,依赖老人友好的带新人氛围,但是新人如果老人带了后后续宅起来,不回馈社区,也不利于社区发展</p></blockquote><p><a href="https://www.bilibili.com/video/BV1Cw411X7A5?spm_id_from=333.880.my_history.page.click"><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/4b08c363b278e4340c4574d03cf5b38033c9dc67.jpg@160w_100h_1c.webp" alt="img"></a></p><p><a href="https://www.bilibili.com/video/BV1Cw411X7A5">一天60元，在青旅摆烂是一种什么体验？（青年旅社的优缺点详细介绍）</a></p><blockquote><p>青旅的介绍,如背包十年</p></blockquote><p>#美食</p><p><a href="https://www.bilibili.com/video/BV1FK421e75E?spm_id_from=333.880.my_history.page.click"><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/e28d46307198530eba2d03a8fc5e7b80b1670cfa.jpg@160w_100h_1c.webp" alt="img"></a></p><p><a href="https://www.bilibili.com/video/BV1FK421e75E">日式咖喱漫谈——有科技 也会狠活儿</a></p><blockquote><p>咖喱在日本演化出很多种类</p><p>加热就可以用来做饭感觉类似现在的料理包</p><p>感觉一些看起来挺好吃的,不同的肉和蔬菜</p></blockquote><p><a href="https://www.bilibili.com/video/BV19S421c7bb?spm_id_from=333.880.my_history.page.click"><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/22557ae88cb78876c9e71797c32dca8f4f3ce384.jpg@160w_100h_1c.webp" alt="img"></a></p><p><a href="https://www.bilibili.com/video/BV19S421c7bb">王国士兵的餐桌——奥斯曼帝国篇</a></p><p>#粤语</p><p>查找B站和油管 男亲女爱全集失败</p><p>#台剧</p><p>#台湾犯罪故事</p><blockquote><p>找到后,在B站看完了四集解说</p><p>出轨&#x3D;&gt;破坏火车铁轨保险骗保事件</p><p>生死困局&#x3D;&gt;蒙冤入狱灭门案黑帮保镖与受害人记者儿子的故事</p><p>恶有引力&#x3D;&gt;感觉出彩一些,家豪(打架)+善亦(自闭+缺少认知+没朋友)杀害老师的故事,对于两个小孩子刻画很好,家豪虽然坏,但是对善亦很好,善亦受欺负,像乖孩子那种,但是对生死好坏没认知,帮助家豪杀害了帮助自己的女老师&#x3D;&#x3D;&gt;994年「內湖女教師命案」</p></blockquote><p>#台北女子图鉴</p><blockquote><p>看了一点,开头台南去台北的部分,很像大陆的小地方进大城市</p></blockquote><p><a href="https://www.olevod.com/index.php/vod/play/id/38903/sid/1/nid/1.html">https://www.olevod.com/index.php/vod/play/id/38903/sid/1/nid/1.html</a><br>#电动车头盔教程</p><p>感觉半盔比较适合,要找新国标3C认证更安全,看了一下测评的牌子</p><p>#ai #朝鲜</p><p><a href="https://www.bilibili.com/video/BV18x4y187NX?spm_id_from=333.880.my_history.page.click"><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/ita/18fc08c3e30209c10650aa39f7763d9980e94863.jpg@160w_100h_1c.webp" alt="img"></a></p><p><a href="https://www.bilibili.com/video/BV18x4y187NX">人民女团：将军！请下命令吧！</a></p><p>ai把朝鲜军歌改成南朝鲜风格</p><p>#台湾</p><blockquote><p>大陆和台湾 要开放福建到台湾马祖,希望早日开放广东</p></blockquote><p>#购物</p><p>新的被子,这次选了绿色</p><p>新的线条小狗短袖两只</p><blockquote><p>小红书看到有博主@陈出月设计 大明帝国护照,想买来做护照壳,不过博主目前只做手账本,护照壳可能需要自己找人做,但是好像烫金要很多件才可以做</p><p>因为年份聊到崇祯纪元,发现最后一本崇祯纪元书本是1914,之前一直记错成1912,</p><p>感觉可以找时间做个崇祯纪元计算的工具</p></blockquote>]]></content>
    
    
    <summary type="html">24-Week4-April</summary>
    
    
    
    <category term="weekly" scheme="https://darksheep404.github.io/categories/weekly/"/>
    
    
    <category term="weekly" scheme="https://darksheep404.github.io/tags/weekly/"/>
    
  </entry>
  
  <entry>
    <title>打工人darkSheep</title>
    <link href="https://darksheep404.github.io/2021/08/21/%E5%B0%8F%E5%86%AF%E7%9A%84%E5%9B%9B%E4%BB%BD%E5%B7%A5%E4%BD%9C/"/>
    <id>https://darksheep404.github.io/2021/08/21/%E5%B0%8F%E5%86%AF%E7%9A%84%E5%9B%9B%E4%BB%BD%E5%B7%A5%E4%BD%9C/</id>
    <published>2021-08-21T19:28:18.000Z</published>
    <updated>2025-05-27T11:20:30.780Z</updated>
    
    <content type="html"><![CDATA[<h2 id="小冯的第四份工作之魔都小码农"><a href="#小冯的第四份工作之魔都小码农" class="headerlink" title="小冯的第四份工作之魔都小码农"></a>小冯的第四份工作之魔都小码农</h2><blockquote><p>这是我继<br>老板与小姨子爱情的受害者(浙江温州皮革厂流水线)<em>是电子厂啦</em><br>合法赌徒观察者(沃尔玛体育彩票售票)<br>华为人工智能背后的人工(数据采集标注)<br>后的第四份工作:魔都小码农</p></blockquote><blockquote><p>其实诸如读物与报纸中北漂沪漂,高额房租等对大城市艰辛的描述<br>让中学的我对北上广深抱有更多的恐惧而不是向往<br>进而决定以后未来的我要远离这些大城市</p></blockquote><p><em>但是世事弄人,我还是来到了上海</em></p><blockquote><p>所幸</p></blockquote><blockquote><p>有着洗衣机,冰箱,空调,厨房和阳台卫浴,客厅的住宿<br>和朝9晚7,2小时午休,但相对弹性的上下班时间<br>构成了我小惬意的实习生活</p></blockquote><blockquote><p>但是其实当初的恐惧和如今的小惬意并不矛盾<br>因为构成我幸福感最重要的保障是<br>公司报销了我们两室一厅4k一个月的房租[笑哭]<br>(虽然理论上是我和舍友同时各承担2k的房租,但是他到30号才入住去了,<br>如果不是公司报销,第一个月我就要负担4k的全额房租了)<br>之后才是美好生活的必备品:洗衣机与空调<br>加分品:可以冰镇可乐与西瓜的冰箱<br>骑单车十几分钟的通勤距离<br>睡懒觉导致迟到十几分钟也没关系的弹性时间</p></blockquote><h3 id="浙江温州流水线"><a href="#浙江温州流水线" class="headerlink" title="浙江温州流水线"></a>浙江温州流水线</h3><p>第一份工作是浙江温州的车间流水线,第一份工位手会做到轻微的蜕皮起泡</p><h4 id="见闻录"><a href="#见闻录" class="headerlink" title="见闻录:"></a>见闻录:</h4><blockquote><ul><li><p>遇上了一次车间集体罢工,因为大家希望转为工资更高的计件(对于当时的我不过是大家都说明天大家都不用来上班)</p></li><li><p>一直笑眯眯的隔壁工位阿嬷因为要照顾确诊癌症的丈夫提出辞职哭成了泪人,往常贼凶的班组长在旁边不停的安慰</p><p>(疾病会轻易的击毁一个家庭的生活)</p></li><li><p>第一次遇到一大批辍学的同龄人</p></li><li><p>不同于送孩子当兵据说要托关系的老家,年轻工友说被村里让他(没上学的适龄人)报名兵役体检否则交几千罚款)</p></li></ul></blockquote><blockquote><p>此处附图1:工作内容*2</p><p>2:仪容镜</p><p>3:午餐</p></blockquote><h3 id="沃尔玛体彩售票员"><a href="#沃尔玛体彩售票员" class="headerlink" title="沃尔玛体彩售票员"></a>沃尔玛体彩售票员</h3><blockquote><p>待续</p></blockquote><h4 id="见闻录-1"><a href="#见闻录-1" class="headerlink" title="见闻录"></a>见闻录</h4><blockquote><p>十赌九输</p></blockquote><h3 id="华为人工智能背后的人工"><a href="#华为人工智能背后的人工" class="headerlink" title="华为人工智能背后的人工"></a>华为人工智能背后的人工</h3><blockquote><p>待续<br>视频号机器人的视频</p></blockquote>]]></content>
    
    
    <summary type="html">darkSheep的  第四份工作の魔都小码农</summary>
    
    
    
    <category term="分享" scheme="https://darksheep404.github.io/categories/%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="分享" scheme="https://darksheep404.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>接口和抽象类区别</title>
    <link href="https://darksheep404.github.io/2021/04/11/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB/"/>
    <id>https://darksheep404.github.io/2021/04/11/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB/</id>
    <published>2021-04-11T20:19:08.000Z</published>
    <updated>2025-05-27T11:20:30.780Z</updated>
    
    <content type="html"><![CDATA[<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><ul><li><p>包含抽象方法的一定是抽象类，但是抽象类不一定含有抽象方法；</p></li><li><p>抽象类中的抽象方法的修饰符只能为public或者protected，默认为public；</p></li><li><p>一个子类继承一个抽象类，则子类必须实现父类抽象方法，否则子类也必须定义为抽象类；</p></li><li><p>抽象类可以包含属性、方法、构造方法，但是构造方法不能用于实例化，主要用途是被子类调用。</p></li></ul><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><ul><li>接口成员变量默认为<code>public static final</code>，必须赋初值，不能被修改</li><li>JDK1.8中对接口增加了新的特性：</li><li>（1）、默认方法（<code>default method</code>）：JDK 1.8允许给接口添加非抽象的方法实现，但必须使用default关键字修饰；定义了default的方法可以不被实现子类所实现，但只能被实现子类的对象调用；如果子类实现了多个接口，并且这些接口包含一样的默认方法，则子类必须重写默认方法；</li><li>（2）、静态方法（<code>static method</code>）：JDK 1.8中允许使用static关键字修饰一个方法，并提供实现，称为接口静态方法。接口静态方法只能通过接口调用（接口名.静态方法名）</li></ul><h3 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h3><ul><li>接口强调特定功能的实现，而抽象类强调所属关系</li></ul><table><thead><tr><th><strong>参数</strong></th><th><strong>抽象类</strong></th><th><strong>接口</strong></th></tr></thead><tbody><tr><td>默认的方法实现</td><td>它可以有默认的方法实现</td><td>jdk1.8之后通过default提供方法默认实现</td></tr><tr><td>构造器</td><td>抽象类可以有构造器,提供给子类super调用</td><td>接口没有构造器</td></tr><tr><td>与正常Java类的区别</td><td>除了你不能实例化抽象类之外，它和普通Java类没有任何区别</td><td>接口是完全不同的类型</td></tr><tr><td>访问修饰符</td><td>抽象方法可以有<strong>public</strong>、<strong>protected</strong>和<strong>default</strong>这些修饰符</td><td>接口方法默认修饰符是<strong>public</strong>。你不可以使用其它修饰符。</td></tr><tr><td>main方法</td><td>抽象方法可以有main方法,且可以运行抽象类main方法</td><td>接口没有main方法</td></tr><tr><td>速度</td><td>它比接口速度要快</td><td>接口是稍微有点慢的，因为它需要时间去寻找在类中实现的方法。</td></tr><tr><td>添加新方法</td><td>如果你往抽象类中添加新的方法，你可以给它提供默认的实现。因此你不需要改变你现在的代码。</td><td>如果你往接口中添加方法，那么你必须改变实现该接口的类。<br />1.8提供default,则无需修改</td></tr><tr><td>设计理念</td><td>is-a的关系，体现的是一种关系的延续</td><td>like-a体现的是一种功能的扩展关系</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;特性&quot;&gt;&lt;a href=&quot;#特性&quot; class=&quot;headerlink&quot; title=&quot;特性&quot;&gt;&lt;/a&gt;特性&lt;/h3&gt;&lt;h4 id=&quot;抽象类&quot;&gt;&lt;a href=&quot;#抽象类&quot; class=&quot;headerlink&quot; title=&quot;抽象类&quot;&gt;&lt;/a&gt;抽象类&lt;/h4&gt;&lt;u</summary>
      
    
    
    
    <category term="java" scheme="https://darksheep404.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://darksheep404.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>JUC并发学习笔记</title>
    <link href="https://darksheep404.github.io/2021/04/08/JUC%E5%AD%A6%E4%B9%A0/"/>
    <id>https://darksheep404.github.io/2021/04/08/JUC%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-04-08T20:19:08.000Z</published>
    <updated>2025-05-27T11:20:30.779Z</updated>
    
    <content type="html"><![CDATA[<p>JUC</p><blockquote><p> 采用源码+文档方式学习</p></blockquote><p>什么是JUC</p><blockquote><p> java.util工具包</p></blockquote><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/20201006/20210322170332.png" alt="image-20210322170330290"></p><blockquote><p> 并发:多线程操作操作一个资源</p></blockquote><ul><li><p>cpu一核,模拟多条线程</p><blockquote><p> 并行:多个人一起走</p></blockquote></li><li><p>CPU多核,多个线程同时运行</p></li></ul><h3 id="Wait和sleep"><a href="#Wait和sleep" class="headerlink" title="Wait和sleep"></a>Wait和sleep</h3><p>1、来自不同的类<br>wait -&gt;Object</p><p> sleep -&gt; Thread<br>2、关于锁的释放<br>wait会释放锁，sleep睡觉了，抱着锁睡觉，不会释放</p><p>3、使用的范国是不同的</p><ul><li><p><code>wait必须在同步代码块中</code></p></li><li><p>sleep可以再任何地方睡</p></li></ul><p>4、是否需要捕获异常<br>Wait不需要捕获异常</p><p>&#x2F;&#x2F;现在也需要了</p><p>sleep必须要捕获异常?</p><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><h4 id="传统-Synchronized锁"><a href="#传统-Synchronized锁" class="headerlink" title="传统 Synchronized锁"></a>传统 Synchronized锁</h4><blockquote><p>线程就是一个单独的资源类,没有任何附属的操作</p><p>资源类OOP</p><p>多线程操作同一个资源类,把资源类丢入线程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 资源类 OOP</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ticket</span> &#123;<br>        <span class="hljs-comment">// 属性、方法</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        <span class="hljs-comment">// 卖票的方式</span><br>        <span class="hljs-comment">// synchronized 本质: 队列，锁</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sale</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span> (number&gt;<span class="hljs-number">0</span>)&#123;<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;卖出了&quot;</span>+(number- -)+<span class="hljs-string">&quot;票,剩余：&quot;</span>+number);<br>        &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.time.OffsetDateTime;Lock 接口<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 真正的多线程开发，公司中的开发，降低耦合性</span><br><span class="hljs-comment">* 线程就是一个单独的资源类，没有任何附属的操作！</span><br><span class="hljs-comment">* 1、 属性、方法</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SaleTicketDemo01</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// 并发：多线程操作同一个资源类, 把资源类丢入线程</span><br><span class="hljs-type">Ticket</span> <span class="hljs-variable">ticket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ticket</span>();<br><span class="hljs-comment">// @FunctionalInterface 函数式接口，jdk1.8 lambda表达式 (参数)-&gt;&#123; 代码 &#125;</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">40</span> ; i++) &#123;<br>            ticket.sale();<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;A&quot;</span>).start();<br>    <span class="hljs-comment">//同上创建名称为B,C的线程并start</span><br>    <span class="hljs-comment">//--------------省略的另外两个线程</span><br>        &#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h4><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/20201006/20210330212342.png" alt="image-20210330212342160"></p><p><code>实现类</code></p><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/20201006/20210330212403.png" alt="image-20210330212403217"></p><blockquote><p> 默认为非公平锁</p></blockquote><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/20201006/20210330212424.png" alt="image-20210330212423864"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Lock三部曲</span><br><span class="hljs-comment">// 1、 new ReentrantLock();</span><br><span class="hljs-comment">// 2、 lock.lock(); // 加锁</span><br><span class="hljs-comment">// 3、 finally=&gt; lock.unlock(); // 解锁</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ticket2</span> &#123;<br><span class="hljs-comment">// 属性、方法</span><br>            <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>            <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sale</span><span class="hljs-params">()</span>&#123;<br>                    lock.lock(); <span class="hljs-comment">// 加锁</span><br>                    <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// 业务代码</span><br>                    <span class="hljs-keyword">if</span> (number&gt;<span class="hljs-number">0</span>)&#123;<br>                    System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;卖出了&quot;</span>+(number--)+<span class="hljs-string">&quot;票,剩余：&quot;</span>+number);<br>                    &#125;<br>                    &#125; <br>                <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                    &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    lock.unlock(); <span class="hljs-comment">// 解锁</span><br>              &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>操作代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//公平锁：十分不公平：可以插队 （默认）</span><br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SaleTicketDemo02</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// 并发：多线程操作同一个资源类, 把资源类丢入线程</span><br>        <span class="hljs-type">Ticket2</span> <span class="hljs-variable">ticket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ticket2</span>();<br>        <span class="hljs-comment">// @FunctionalInterface 函数式接口，jdk1.8 lambda表达式 (参数)-&gt;&#123; 代码 &#125;</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">40</span> ; i++)<br>        ticket.sale();&#125;,<span class="hljs-string">&quot;A&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">40</span> ; i++)<br>        ticket.sale();&#125;,<span class="hljs-string">&quot;B&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">40</span> ; i++)<br>        ticket.sale();&#125;,<span class="hljs-string">&quot;C&quot;</span>).start();<br>        &#125;<br></code></pre></td></tr></table></figure><blockquote><blockquote><p>Synchronized 和 Lock 区别<br>1、Synchronized 内置的Java关键字， Lock 是一个Java类<br>2、Synchronized 无法判断获取锁的状态，Lock 可以判断是否获取到了锁<br>3、Synchronized 会自动释放锁，lock 必须要手动释放锁！如果不释放锁，死锁<br>4、Synchronized 线程 1（获得锁，阻塞）、线程2（等待，傻傻的等）；Lock锁就不一定会等待下<br>去；可以设置等待超时?<br>5、Synchronized 可重入锁，不可以中断的，非公平；Lock ，可重入锁，可以 判断锁，非公平（可以<br>自己设置）；<br>6、Synchronized 适合锁少量的代码同步问题，Lock 适合锁大量的同步代码！<br>锁是什么，如何判断锁的是谁！<br>4、生产者和消费者问题<br>面试的：单例模式、排序算法、生产者和消费者、死锁</p></blockquote></blockquote><h3 id="生产者和消费者问题"><a href="#生产者和消费者问题" class="headerlink" title="生产者和消费者问题"></a>生产者和消费者问题</h3><p><code>判断要使用if,不能使用while</code>:见多线程笔记</p><h4 id="lock实现"><a href="#lock实现" class="headerlink" title="lock实现"></a>lock实现</h4><blockquote><p>并发资源类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 判断等待，业务，通知</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Data2</span>&#123; <span class="hljs-comment">// 数字 资源类</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><span class="hljs-type">Condition</span> <span class="hljs-variable">condition</span> <span class="hljs-operator">=</span> lock.newCondition();<br><span class="hljs-comment">//condition.await(); // 等待</span><br><span class="hljs-comment">//condition.signalAll(); // 唤醒全部</span><br><span class="hljs-comment">//+1</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">increment</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 业务代码</span><br>        <span class="hljs-keyword">while</span> (number!=<span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//0</span><br>        <span class="hljs-comment">// 等待</span><br>        condition.await();<br>&#125;<br>number++;<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;=&gt;&quot;</span>+number);<br><span class="hljs-comment">// 通知其他线程，我+1完毕了</span><br>condition.signalAll();<br>&#125; <br>    <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>lock.unlock();<br>&#125;<br>&#125;<br><span class="hljs-comment">//-1</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decrement</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">while</span> (number==<span class="hljs-number">0</span>)&#123; <span class="hljs-comment">// 1</span><br>        <span class="hljs-comment">// 等待</span><br>        condition.await();<br>        &#125;<br>        number--;<br>        System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;=&gt;&quot;</span>+number);<br>        <span class="hljs-comment">// 通知其他线程，我-1完毕了</span><br>        condition.signalAll();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>        &#125;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>并发访问</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.pc;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Condition;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<span class="hljs-type">Data2</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Data2</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    data.increment();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>        &#125;<br>        &#125;,<span class="hljs-string">&quot;A&quot;</span>).start();<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>            data.decrement();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>            &#125;<br>            &#125;<br>            &#125;,<span class="hljs-string">&quot;B&quot;</span>).start();<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>            data.increment();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>            &#125;<br>            &#125;<br>            &#125;,<span class="hljs-string">&quot;C&quot;</span>).start();<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>            data.decrement();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>            &#125;<br>            &#125;<br>            &#125;,<span class="hljs-string">&quot;D&quot;</span>).start();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>任何一个新的技术，绝对不是仅仅只是覆盖了原来的技术，优势和补充！</p><blockquote><p>Condition 精准的通知和唤醒线程</p><p><code>condition1.await();</code></p><p><code>condition2.signal();</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printA</span><span class="hljs-params">()</span>&#123;<br>lock.lock();<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 业务，判断-&gt; 执行-&gt; 通知</span><br><span class="hljs-keyword">while</span> (number!=<span class="hljs-number">1</span>)&#123;<br><span class="hljs-comment">// 等待</span><br>condition1.await();<br>&#125;<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;=&gt;AAAAAAA&quot;</span>);<br><span class="hljs-comment">// 唤醒，唤醒指定的人，B</span><br>number = <span class="hljs-number">2</span>;<br>condition2.signal();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>lock.unlock();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8锁问题"><a href="#8锁问题" class="headerlink" title="8锁问题"></a>8锁问题</h3><blockquote><p>如何判断锁的是谁！永远的知道什么锁，锁到底锁的是谁！</p></blockquote><h3 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h3><p>1、可以有返回值 </p><p>2、可以抛出异常 </p><p>3、方法不同，run()&#x2F; call()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">call</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;call()&quot;</span>); <span class="hljs-comment">// 会打印几个call</span><br><span class="hljs-comment">// 耗时的操作</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1024</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CallableTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException,<br>InterruptedException &#123;<br><span class="hljs-comment">// new Thread(new Runnable()).start();</span><br><span class="hljs-comment">// new Thread(new FutureTask&lt;V&gt;()).start();</span><br><span class="hljs-comment">// new Thread(new FutureTask&lt;V&gt;( Callable )).start();</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>().start(); <span class="hljs-comment">// 怎么启动Callable</span><br><span class="hljs-type">MyThread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br><span class="hljs-type">FutureTask</span> <span class="hljs-variable">futureTask</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>(thread); <span class="hljs-comment">// 适配类</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(futureTask,<span class="hljs-string">&quot;A&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(futureTask,<span class="hljs-string">&quot;B&quot;</span>).start(); <span class="hljs-comment">// 结果会被缓存，效率高</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Integer) futureTask.get(); <span class="hljs-comment">//这个get 方法可能会产生阻塞！把他放到</span><br>最后<br><span class="hljs-comment">// 或者使用异步通信来处理！</span><br>System.out.println(o);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;Integer&gt; &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">call</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;call()&quot;</span>); <span class="hljs-comment">// 会打印几个call</span><br><span class="hljs-comment">// 耗时的操作</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1024</span>;<br>&#125;&#125;<br></code></pre></td></tr></table></figure><blockquote><p>1、有缓存 2、结果可能需要等待，会阻塞！</p></blockquote><h3 id="常用的辅助类-必会"><a href="#常用的辅助类-必会" class="headerlink" title="常用的辅助类(必会)"></a>常用的辅助类(必会)</h3><h4 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CountDownLatchDemo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><span class="hljs-comment">// 总数是6，必须要执行任务的时候，再使用！</span><br><span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">countDownLatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">6</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;=<span class="hljs-number">6</span> ; i++) &#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot; Go out&quot;</span>);<br>countDownLatch.countDown(); <span class="hljs-comment">// 数量-1</span><br>&#125;,String.valueOf(i)).start();<br>&#125;<br>countDownLatch.await(); <span class="hljs-comment">// 等待计数器归零，然后再向下执行</span><br>System.out.println(<span class="hljs-string">&quot;Close Door&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>countDownLatch.countDown();</code> &#x2F;&#x2F; 数量-1</p><p><code>countDownLatch.await();</code></p><p> &#x2F;&#x2F; 等待计数器归零，然后再向下执行 每次有线程调用 countDown() 数量-1，假设计数器变为0，countDownLatch.await() 就会被唤醒，继续 执行！</p><h4 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h4><blockquote><blockquote><p>加法计数器</p></blockquote></blockquote><h4 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h4><blockquote><p>  信号量</p><p> semaphore.acquire() 获得，假设如果已经满了，等待，等待被释放为止<br> semaphore.release(); 释放，会将当前的信号量释放 + 1，然后唤醒等待的线程！ 作用： 多个共享资源互斥的使用！并发限流，控制最大的线程数！</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SemaphoreDemo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// 线程数量：停车位! 限流！</span><br><span class="hljs-type">Semaphore</span> <span class="hljs-variable">semaphore</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(<span class="hljs-number">3</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;=<span class="hljs-number">6</span> ; i++) &#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br><span class="hljs-comment">// acquire() 得到</span><br><span class="hljs-keyword">try</span> &#123;<br>semaphore.acquire();<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;抢到车</span><br><span class="hljs-string">位&quot;</span>);<br>TimeUnit.SECONDS.sleep(<span class="hljs-number">2</span>);<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;离开车</span><br><span class="hljs-string">位&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>semaphore.release(); <span class="hljs-comment">// release() 释放</span><br>&#125;<br>&#125;,String.valueOf(i)).start();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 独占锁（写锁） 一次只能被一个线程占有</span><br><span class="hljs-comment">* 共享锁（读锁） 多个线程可以同时占有</span><br><span class="hljs-comment">* ReadWriteLock</span><br><span class="hljs-comment">* 读-读 可以共存！</span><br><span class="hljs-comment">* 读-写 不能共存！</span><br><span class="hljs-comment">* 写-写 不能共存！</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadWriteLockDemo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">MyCache</span> <span class="hljs-variable">myCache</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCache</span>();<br><span class="hljs-comment">// 写入</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span> ; i++) &#123;<br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> i;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;myCache.put(temp+<span class="hljs-string">&quot;&quot;</span>,temp+<span class="hljs-string">&quot;&quot;</span>);<br>&#125;,String.valueOf(i)).start();<br>&#125;<br><span class="hljs-comment">// 读取</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span> ; i++) &#123;<br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> i;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>myCache.get(temp+<span class="hljs-string">&quot;&quot;</span>);<br>&#125;,String.valueOf(i)).start();<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 加锁的</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCacheLock</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-comment">// 读写锁： 更加细粒度的控制</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">ReadWriteLock</span> <span class="hljs-variable">readWriteLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantReadWriteLock</span>();<br><span class="hljs-keyword">private</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><span class="hljs-comment">// 存，写入的时候，只希望同时只有一个线程写</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(String key,Object value)</span>&#123;<br>readWriteLock.writeLock().lock();<br><span class="hljs-keyword">try</span> &#123;<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;写入&quot;</span>+key);<br>map.put(key,value);<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;写入OK&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>readWriteLock.writeLock().unlock();<br>&#125;<br>&#125;<br><span class="hljs-comment">// 取，读，所有人都可以读！</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">get</span><span class="hljs-params">(String key)</span>&#123;<br>readWriteLock.readLock().lock();<br><span class="hljs-keyword">try</span> &#123;<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;读取&quot;</span>+key);<br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> map.get(key);<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;读取OK&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>readWriteLock.readLock().unlock();<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 自定义缓存</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCache</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<span class="hljs-number">10</span>、阻塞队列<br>阻塞队列：<br><span class="hljs-comment">// 存，写</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(String key,Object value)</span>&#123;<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;写入&quot;</span>+key);<br>map.put(key,value);<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;写入OK&quot;</span>);<br>&#125;<br><span class="hljs-comment">// 取，读</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">get</span><span class="hljs-params">(String key)</span>&#123;<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;读取&quot;</span>+key);<br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> map.get(key);<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;读取OK&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h3><p>什么情况下我们会使用 阻塞队列：多线程并发处理，线程池！ 学会使用队列 添加、移除 </p><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/20201006/20210330214037.png" alt="image-20210330214037634"></p><h3 id="线程池-重点"><a href="#线程池-重点" class="headerlink" title="线程池(重点)"></a>线程池(重点)</h3><p><code>线程池：三大方法、7大参数、4种拒绝策略</code></p><blockquote><blockquote><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/20201006/20210323151912.png" alt="image-20210323151912115"></p></blockquote></blockquote><blockquote><blockquote><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/20201006/20210323151944.png" alt="image-20210323151944753"></p><p><img src="/JUC_md_files/01_20210325150248.png?v=1&type=image&token=V1:8HEaAjBtXmTIvprHJ7YSw1om8WE1nF9vrzOwwCSIJw8" alt="输入图片描述"><br><img src="/JUC_md_files/02_20210325150257.png?v=1&type=image&token=V1:bQD8d945Z777r5xwEbmNVNoJMKc3tqpOOogHR_5od-o" alt="输入图片描述"><br><img src="/JUC_md_files/03_20210325150330.png?v=1&type=image&token=V1:gpwseHVrgAL5RKm_0c2-yMuJRc7vJccqH1R98cDNaJI" alt="输入图片描述"><br><img src="/JUC_md_files/04_20210325150340.png?v=1&type=image&token=V1:5RHrJAF1fsp4VFh1zIjp-PdUB-pnFfZT3ERcqZyW67o" alt="输入图片描述"><br><img src="/JUC_md_files/05_20210325150348.png?v=1&type=image&token=V1:_D7GTafOz3trfRN0aCyOy8aIRv7BxYY_LGwzyCRbBvg" alt="输入图片描述"><br><img src="/JUC_md_files/06_20210325150356.png?v=1&type=image&token=V1:fSWbriyf80g3GqY-bUR_Q0Y4HwtfV47WVTE7p3mOeZE" alt="输入图片描述"><br><img src="/JUC_md_files/07_20210325150407.png?v=1&type=image&token=V1:fsWIsw_fCC9UkhX28Fyu8PmYv5VbujnnyJ0oiWCw8t8" alt="输入图片描述"><br><img src="/JUC_md_files/08_20210325150417.png?v=1&type=image&token=V1:kGqW0DrYgT4PF3gTUbg-Etl2WipuUsC4JyEdKrzKpcA" alt="输入图片描述"><br><img src="/JUC_md_files/09_20210325150425.png?v=1&type=image&token=V1:T_9z9K9Wj3sZr8xQ_Fg4818LkU6NDn46NWbXDRK0e6E" alt="输入图片描述"><br><img src="/JUC_md_files/10_20210325150435.png?v=1&type=image&token=V1:sYs64Wqv1V6-Hw2pZHVXftibLBH_yytdeCr_8eoHuQE" alt="输入图片描述"><br><img src="/JUC_md_files/10_20210325150444.png?v=1&type=image&token=V1:elZuMttx19IJGRFHxB_PhFoAe5Iv-LQbgnHlWkuFrW8" alt="输入图片描述"><br><img src="/JUC_md_files/11_20210325150506.png?v=1&type=image&token=V1:lqJVF59Kpo5GeUeAzeowYSQoUe7DyB3zSN3oTUTzsY0" alt="输入图片描述"><br><img src="/JUC_md_files/12_20210325150515.png?v=1&type=image&token=V1:YLvkwlFgsseRDarnJc4ZODiQx6bfCpb2nRv_iRcNBKg" alt="输入图片描述"><img src="/JUC_md_files/13_20210325150524.png?v=1&type=image&token=V1:mC0S6cOo7mRCKvY5fd0Npgc-ZJLCHA59psB2L_wTZqw" alt="输入图片描述"><img src="/JUC_md_files/14_20210325150533.png?v=1&type=image&token=V1:-1DXkutrjaCNDNOix5P-jmVi6fAq5Au-n1VUDqZG5Os" alt="输入图片描述"><img src="/JUC_md_files/15_20210325150542.png?v=1&type=image&token=V1:E_ZzLxZoW0PoD9y4DVHajyuBVArL9jnC6FTN5ohMo6U" alt="输入图片描述"><img src="/JUC_md_files/16_20210325150550.png?v=1&type=image&token=V1:wUq3fM9Dfr_AS0C0hUx5yEea7eZQPxuRI2wuKj8S5F4" alt="输入图片描述"><img src="/JUC_md_files/17_20210325150600.png?v=1&type=image&token=V1:dySM0LHdejxhlv_UmEpBeGjfOlJkfyDCq66YmftZDQw" alt="输入图片描述"><img src="/JUC_md_files/18_20210325150608.png?v=1&type=image&token=V1:fjetujmUR3gP1peHXiX86gdo6yyAg4yJDhpKGwwkmxM" alt="输入图片描述"><img src="/JUC_md_files/19_20210325150616.png?v=1&type=image&token=V1:Y9cQig7yytkhQ_HCIHOCCM_vG2FPj1RUrOewccb3x64" alt="输入图片描述"><img src="/JUC_md_files/19_20210325150622.png?v=1&type=image&token=V1:HtYkcgipjqRojL2wYf0eA0M-MJz76etv2VS3it-dHq4" alt="输入图片描述"><img src="/JUC_md_files/20_20210325150628.png?v=1&type=image&token=V1:YrgACay29Q1Gam8Z0wSg9eohoIZA2OrDZdK85QU2hOA" alt="输入图片描述"><img src="/JUC_md_files/21_20210325150635.png?v=1&type=image&token=V1:z0fZy0MQeHiVJ7yuCPlIkt35QPsKUXGphXEwwIjnNmY" alt="输入图片描述"><img src="/JUC_md_files/22_20210325150641.png?v=1&type=image&token=V1:sANnjjRAGW1D6jVWxukwxyJpntA18_qQUGEqZ01Qe2U" alt="输入图片描述"><img src="/JUC_md_files/23_20210325150647.png?v=1&type=image&token=V1:SUi-uwu7yPzW_YxlgfoBmAuCpWlE3MFMDxWbA9g8dtw" alt="输入图片描述"></p></blockquote></blockquote><h3 id="12-四大函数式接口"><a href="#12-四大函数式接口" class="headerlink" title="12:四大函数式接口"></a>12:四大函数式接口</h3><p>lamdba表达式,函数式接口,链式编程,Stream流</p><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/20201006/20210323154333.png" alt="image-20210323154333067"></p><ul><li><p>Function接口:入参分别为参数类型和返回值类型</p></li><li><p>断定型接口,一个输入参数,返回值只能是布尔值</p></li><li><p>消费型接口,生产者接口</p></li><li><p>消费型接口:只有输入,没有返回值</p></li><li><p>生产者接口,没有输入只有返回值</p></li><li><blockquote><blockquote><p>函数式接口都可以用lambda接口简化</p></blockquote></blockquote></li><li><blockquote><blockquote><p>泛型,枚举,反射,传统程序员常用</p></blockquote></blockquote></li></ul><h3 id="Stream流式计算"><a href="#Stream流式计算" class="headerlink" title="Stream流式计算"></a>Stream流式计算</h3><p><code>操作:存储+计算</code></p><ul><li><p>存储:集合,mysql</p></li><li><p>计算都应该交给流来操作</p></li></ul><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/20201006/20210323160253.png" alt="image-20210323160253580"></p><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/20201006/20210323160508.png" alt="image-20210323160507757">10</p><ul><li>打印传入的参数</li></ul><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/20201006/20210323160621.png" alt="image-20210323160621019"></p><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/20201006/20210323160733.png" alt="image-20210323160733487"></p><ul><li>每个方法返回this就能链式</li></ul><h3 id="14-ForkJoin"><a href="#14-ForkJoin" class="headerlink" title="14:ForkJoin"></a>14:ForkJoin</h3><blockquote><blockquote><p>分支合并</p><ul><li>jdk1.7之后出来的</li><li>并行执行任务,提高效率</li><li>跳过</li></ul></blockquote></blockquote><h3 id="15-异步回调"><a href="#15-异步回调" class="headerlink" title="15:异步回调"></a>15:异步回调</h3><h3 id="16-JMM"><a href="#16-JMM" class="headerlink" title="16:JMM"></a>16:JMM</h3><h3 id="17-Volatile可见性及其非原子性验证"><a href="#17-Volatile可见性及其非原子性验证" class="headerlink" title="17:Volatile可见性及其非原子性验证"></a>17:Volatile可见性及其非原子性验证</h3><ul><li><p>保证可见性</p></li><li><p>不保证原子性</p></li><li><p>ACID中就有原子性:不可分割</p></li><li><p>幻读,脏读</p><p><code>atomic包</code></p><h4 id="使用原子类解决原子性问题"><a href="#使用原子类解决原子性问题" class="headerlink" title="使用原子类解决原子性问题"></a>使用原子类解决原子性问题</h4></li></ul><h3 id="指令重排"><a href="#指令重排" class="headerlink" title="指令重排"></a>指令重排</h3><blockquote><p>源代码-&gt;编译器优化的重排,指令并行也可能会重排-&gt;内存系统也会重排–&gt;执行</p><ul><li>处理器进行指令重排的时候,会考虑数据的依赖性</li><li></li></ul></blockquote><p>volatile避免指令重排</p><ul><li>内存屏障.cpu指令,作用:</li><li>1:保证特定的操作的执行顺序</li><li>可以保证某些变量的内存可见性</li></ul><h3 id="DCL懒汉式就使用了volatile"><a href="#DCL懒汉式就使用了volatile" class="headerlink" title="DCL懒汉式就使用了volatile"></a>DCL懒汉式就使用了volatile</h3><ul><li>饿汉式单例–构造器私有</li></ul><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/20201006/20210324210652.png" alt="image-20210324210646067"></p><ul><li>可能浪费内存</li></ul><p>懒汉式</p><ul><li>先构造器私有</li><li>不为空则再为创建</li><li><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/20201006/20210324211031.png" alt="image-20210324211031110"></li><li>多线程情况下失败</li><li>如果&#x3D;&#x3D;null,先上锁</li><li>双重检测锁懒汉式</li><li>lazayman&#x3D;new lazyman()不是原子性操作</li><li><ul><li>分配内存空间</li><li>执行构造方法,初始化对象</li><li>把对象指向空间</li><li>如果走成132</li><li>其他线程发现空间里有对象,但是实际上未初始化,返回了未初始化的对象</li><li><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/20201006/20210324211618.png" alt="image-20210324211618757"></li></ul></li><li><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/20201006/20210324211142.png" alt="image-20210324211142656"></li><li>利用反射破坏单例模式</li><li><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/20201006/20210324211902.png" alt="image-20210324211902466"></li><li>防止</li><li>给构造器加个锁,如果已经有对象,</li><li><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/20201006/20210324211944.png" alt="image-20210324211944040"></li></ul><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举:"></a>枚举:</h3><blockquote><p>jdk1.5新增</p><p>本身也是一个class类</p></blockquote><h3 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h3><blockquote><p>compareAndSwap:比较并交换</p></blockquote><blockquote><p> 如果期望的值达到了,则更新,否则不更新</p></blockquote><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/20201006/20210324213529.png" alt="image-20210324213529144"></p><p>java无法操作内存</p><p>java可以调用C++native</p><p>C++可以操作内存</p><p>java的后门,可以通过这个操作内存</p><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/20201006/20210324213831.png" alt="image-20210324213831438"></p><p>offset:内存偏移</p><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/20201006/20210324214022.png" alt="image-20210324214022006"></p><ul><li>内存操作,效率很高</li><li>自旋锁,不停旋转直到成功为止</li><li><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/20201006/20210324214145.png" alt="image-20210324214144352"></li><li>CAS:ABA问题(狸猫换太子)</li><li><ul><li>比较当前工作内存中的值和主内存的值,如果之歌值是期望的,那么执行操作,如果不是就一直循环</li><li>好处:自带原子性</li><li>缺点 :</li><li>循环会耗时</li><li>一次性只能保证一个共享变量的原子性</li></ul></li><li>UnSafe类</li><li></li></ul><h3 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h3><p>CAS时捣乱线程改过又改回去了</p><ul><li>乐观锁,悲观锁</li></ul><h3 id="原子引用"><a href="#原子引用" class="headerlink" title="原子引用"></a>原子引用</h3><p>TimeUnit.secondes.sleep()来延时</p><p>像SQl插入后版本号提升1</p><p><img src="C:/Users/Lenovo/AppData/Roaming/Typora/typora-user-images/image-20210324220212708.png" alt="image-20210324220212708"></p><p>原子类型改为原子引用,加上了时间戳</p><p>乐观锁有CAS和版本号两种解决方式</p><p><img src="C:/Users/Lenovo/AppData/Roaming/Typora/typora-user-images/image-20210324220422410.png" alt="image-20210324220422410"></p><h3 id="此处需要敲代码-还有单例模式这些"><a href="#此处需要敲代码-还有单例模式这些" class="headerlink" title="此处需要敲代码,还有单例模式这些"></a>此处需要敲代码,还有单例模式这些</h3><h3 id="21-对各种锁的理解"><a href="#21-对各种锁的理解" class="headerlink" title="21:对各种锁的理解"></a>21:对各种锁的理解</h3><h4 id="公平锁-非公平锁"><a href="#公平锁-非公平锁" class="headerlink" title="公平锁,非公平锁"></a>公平锁,非公平锁</h4><ul><li>公平锁暖插队,公平锁可以插队</li><li>非公平锁,可以插队(默认都是非公平)</li><li>3s的不等待很多秒的</li><li>Lock &#x3D;new RestrantLock()</li><li>参数传入True则为公平锁</li></ul><h4 id="可重入锁-x2F-递归锁"><a href="#可重入锁-x2F-递归锁" class="headerlink" title="可重入锁&#x2F;递归锁"></a>可重入锁&#x2F;递归锁</h4><p>Re en trant:Reentrant<br>001</p><p><img src="C:/Users/Lenovo/AppData/Roaming/Typora/typora-user-images/image-20210324220914187.png" alt="image-20210324220914187"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;JUC&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 采用源码+文档方式学习&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;什么是JUC&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; java.util工具包&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:/</summary>
      
    
    
    
    <category term="笔记" scheme="https://darksheep404.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="java" scheme="https://darksheep404.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>查山正微信小程序</title>
    <link href="https://darksheep404.github.io/2021/03/19/%E6%9F%A5%E5%B1%B1%E6%AD%A3/"/>
    <id>https://darksheep404.github.io/2021/03/19/%E6%9F%A5%E5%B1%B1%E6%AD%A3/</id>
    <published>2021-03-19T15:20:18.000Z</published>
    <updated>2025-05-27T11:20:30.780Z</updated>
    
    <content type="html"><![CDATA[<ul><li>提交表单时,contact为对象openid–贡献者对应微信昵称</li><li>条目页面:显示贡献者微信昵称,头像(如果用户换头像,原头像url会过期失效–如果贡献了条目,则存储用户头像?)</li></ul><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ul><li><input disabled="" type="checkbox"> <code>TODO</code>如需使用date字段,需初始化之前未设置date字段的数据库</li><li><input disabled="" type="checkbox"> <code>feature</code>:主页随机一店,选择查看山正列表</li><li><input disabled="" type="checkbox"> 提交汉服时的check改为精确匹配</li><li><input disabled="" type="checkbox"> <code>fix</code>:小程序启动时获取info信息,而不是到了每个页面再加载</li><li><input disabled="" type="checkbox"> <code>feature</code>:对于冲突汉服店铺信息的公示与投票</li><li><input disabled="" type="checkbox"> <code>improve</code>:获取更多的汉服山正店铺信息</li><li><input disabled="" type="checkbox"> <code>improve</code>汉服图片链接可以放到images目录下</li><li><input disabled="" type="checkbox"> <code>fix</code>微信更新接口后更新原获取用户信息代码</li><li><input disabled="" type="checkbox"> 添加功能导致的主页UI重构</li></ul><blockquote><p>当前主页塞不下其他功能入口了</p></blockquote><ul><li><input disabled="" type="checkbox"> 加入以图搜图入口</li></ul><blockquote><p>可采用淘宝以图搜图接口</p></blockquote><h2 id="V0-3-0"><a href="#V0-3-0" class="headerlink" title="V0.3.0"></a>V0.3.0</h2><h3 id="bug修复"><a href="#bug修复" class="headerlink" title="bug修复"></a>bug修复</h3><ul><li><p><input checked="" disabled="" type="checkbox"> 提交时的查询是模糊匹配还是全匹配?:<code>暂定为模糊匹配</code></p></li><li><p><input disabled="" type="checkbox"> <code>TODO</code>如需使用date字段,需初始化之前未设置date字段的数据库</p></li><li><p><input checked="" disabled="" type="checkbox"> <code>Fix</code>输入框为空时查询卡死</p></li><li><p><input checked="" disabled="" type="checkbox"> <code>Fix</code>修复了添加新用户时忘记添加nums字段的bug</p></li><li><p><input checked="" disabled="" type="checkbox"> <code>improve</code>新增汉服和冲突,用户增加了date字段</p></li><li><p><input checked="" disabled="" type="checkbox"> <code>Fix</code>某次查询结果未收录后,以后查询都会显示一个未收录–<code>如果收录,重新置值为true</code></p></li><li><p><input checked="" disabled="" type="checkbox"> <code>Fix</code>未收录时,显示的店铺名随输入框变动–<code>显示时使用新设定的值而非输入值</code></p></li><li><p><input checked="" disabled="" type="checkbox"> <code>Fix</code>提交页面点击用户多次按钮造成的数据重复提交–<code>更改clickable为false</code></p></li></ul><h3 id="进行中"><a href="#进行中" class="headerlink" title="进行中"></a>进行中</h3><p><code>小程序端后台管理系统</code></p><ul><li><p><input checked="" disabled="" type="checkbox"> <code>feature</code>:汉服店铺贡献者列表,按照贡献店铺数目排序(<code>预备v0.3.0推出</code>)</p></li><li><p><input disabled="" type="checkbox"> <code>feature</code>  <code>admin</code> <code>timportant</code>待鉴定汉服页面</p></li><li><p><input checked="" disabled="" type="checkbox"> <code>UI</code> <code>Fix</code>排名信息页的加载弹窗</p></li><li><p><input checked="" disabled="" type="checkbox"> 删除函数:疑虑:remove没有日志,不知道删除了什么–<code>TODO:先查存入再删</code></p></li><li><p><input checked="" disabled="" type="checkbox"> 修改函数</p></li><li><p><input checked="" disabled="" type="checkbox"> 根据id查询函数</p></li><li><p><input disabled="" type="checkbox"> 分页云函数:限定山正,分页跳转:</p><blockquote><ul><li><input disabled="" type="checkbox"> </li><li><input checked="" disabled="" type="checkbox"> 分页跳转</li><li><input disabled="" type="checkbox"> 选择查看山正列表</li><li><input disabled="" type="checkbox"> <code>feature</code>:主页随机一店</li></ul></blockquote></li><li><p><input checked="" disabled="" type="checkbox"> list页面处设置一个加载中弹窗,区分删除确认弹窗<code>UI</code> <code>Fix</code></p></li><li><p><input checked="" disabled="" type="checkbox"> 优化显示列表,当前过于密集<code>UI</code> <code>Fix</code></p></li><li><p><input disabled="" type="checkbox"> 获取列表改为都是山店or正店,可以拿到主页展示<code>admin</code> <code>user</code> <code>promove</code></p></li><li><p><input disabled="" type="checkbox"> 冲突汉服信息的更正<code>feature</code>  <code>admin</code></p></li><li><p><input disabled="" type="checkbox"> 用户提交了已经有的数据<code>useractions</code></p></li><li><p><input checked="" disabled="" type="checkbox"> 所有文本尽量上云</p></li></ul><blockquote><p>带来加载缓慢问题–更改为小程序启动时全部获取放到缓存Storage中</p></blockquote><ul><li><input checked="" disabled="" type="checkbox"> 待鉴定店铺小程序端查看</li></ul><blockquote><p>去除未鉴定提交为表单,改为直接客服按钮发送店铺</p></blockquote><ul><li><p><input disabled="" type="checkbox"> 提交汉服时的check改为精确匹配</p></li><li><p><input checked="" disabled="" type="checkbox"> 未知汉服时主动沟通方法</p><blockquote><p>如上</p></blockquote></li></ul><h3 id="待实现"><a href="#待实现" class="headerlink" title="待实现"></a>待实现</h3><ul><li><p><input disabled="" type="checkbox"> <code>fix</code>:小程序启动时获取info信息,而不是到了每个页面再加载</p></li><li><p><input disabled="" type="checkbox"> <code>feature</code>:对于冲突汉服店铺信息的公示与投票</p></li><li><p><input disabled="" type="checkbox"> <code>improve</code>:获取更多的汉服山正店铺信息</p></li><li><p><input checked="" disabled="" type="checkbox"> <code>learning</code>:学习并利用云开发CMS便捷管理云端数据</p></li><li><p><input checked="" disabled="" type="checkbox"> <code>feature</code>:对具体店铺的评论—(<code>预备v0.3.0推出</code>)</p><blockquote><p>评论区,论坛类需要企业资质</p></blockquote></li></ul><h3 id="未收录体验优化"><a href="#未收录体验优化" class="headerlink" title="未收录体验优化"></a>未收录体验优化</h3><p><code>待选解决方案</code></p><ul><li><input checked="" disabled="" type="checkbox"> 如果未查到,自动收录到未查询数据库–定时统一搜集</li><li><input checked="" disabled="" type="checkbox"> 弹出订阅模板消息申请–如果未查到获取订阅通知–收录后通知</li><li><input checked="" disabled="" type="checkbox"> 未查询到–向客户发送消息–在提交页面新增–客服会话<code>feature</code> <code>timportant</code></li></ul><hr><ul><li><input disabled="" type="checkbox"> 汉服图片链接可以放到images目录下</li><li><input disabled="" type="checkbox"> 主页tips换行符失效</li><li><input disabled="" type="checkbox"> textarea不放在表单组件中时,无法移动光标,按向上方向键会丢失内容</li><li><input disabled="" type="checkbox"> 使用text替代数组:未知问题:原来text使用换行符\n,不会换行,改为用数组遍历<view>实现换行</li></ul><hr><h2 id="V0-2-0"><a href="#V0-2-0" class="headerlink" title="V0.2.0"></a>V0.2.0</h2><blockquote></blockquote><ul><li><p><code>fix</code>:未录入店铺显示为山店</p></li><li><p>更正查询结果为模糊匹配所得列表–修正按钮位置</p></li><li><p>更正显示tips未从云端数据库获取:则不提交审核,仅修改数据库也可修正</p></li><li><p>展示提供店铺数目的人名单列表—待做</p></li><li><blockquote><p>拟解决方案:更换true和false为</p><ul><li>或者:新增字段,如果false且该字段为真,则显示为未录入</li><li><code>采用</code></li></ul></blockquote></li></ul><h2 id="代码问题-amp-知识速记"><a href="#代码问题-amp-知识速记" class="headerlink" title="代码问题&amp;知识速记"></a>代码问题&amp;知识速记</h2><h3 id="数据库聚合查询"><a href="#数据库聚合查询" class="headerlink" title="数据库聚合查询"></a>数据库聚合查询</h3><p><code>project</code> 的形式如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">project(&#123;<br>  &lt;表达式&gt;<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>聚合阶段。把指定的字段传递给下一个流水线，指定的字段可以是某个已经存在的字段，也可以是计算出来的新字段。</p><p><code>addFields</code> 等同于同时指定了所有已有字段和新增字段的 <code>project</code> 阶段</p><p>const _ &#x3D; db.command</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">await</span> db.<span class="hljs-title function_">collection</span>(<span class="hljs-string">&#x27;user&#x27;</span>).<span class="hljs-title function_">where</span>(&#123;<br>    <span class="hljs-attr">openid</span>:wxContext.<span class="hljs-property">OPENID</span><br>  &#125;)<br>  .<span class="hljs-title function_">update</span>(&#123;<br>    <span class="hljs-attr">data</span>: &#123;<br>      <span class="hljs-comment">// 更新字段++</span><br>      <span class="hljs-attr">nums</span>:_.<span class="hljs-title function_">inc</span>(<span class="hljs-number">1</span>)<br>    &#125;,<br>  &#125;)<br></code></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><blockquote><p>在微信开发中我们经常会用到标签中属性的属性值，有时候我们通过 data-* 和 e.target.dateset 来获取属性值</p></blockquote><ul><li><p>调用出来的数据是undefined</p></li><li><p>data后面的属性名写得不规范！在data后面的属性名是不能按照驼峰式的写法，只要把定义的<strong>属性名全部换成小写</strong>就没有问题了</p></li><li><p>但这种方式有时也会存在 e.target.dataset&#x3D;{},此时productid&#x3D;undefined，就需要换一种解决办法。。。</p><p>　　2）console.log(e)查看</p><p>  　　e对象中包含两个对象分别是currentTarget和target，而真正的数据包含在currentTarget。 打印出e，找到你的数据，通过对象调用的方式即可。</p><blockquote><p>使用第一种的方法e.target.dataset.action   会获取当前点击的元素的action，则获取图片上的action，图片上没有action便取的是undefined； 使用第二种的方法e.currentTarget.dataset.action  会获取有事件的那个元素，即view，所以获得“father”</p></blockquote></li><li><p><code>var date=new Date()</code>:js获取当前时间</p></li></ul><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/20201006/20210303154025.png" alt="image-20210303154021312"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">onLoad</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">options</span>) &#123;<br>    wx.<span class="hljs-title function_">showLoading</span>(&#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;加载中&#x27;</span>,<br>    &#125;)<br>    <span class="hljs-keyword">var</span> that = <span class="hljs-variable language_">this</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;postid&#x27;</span>, options.<span class="hljs-property">postid</span>)<br>    <span class="hljs-keyword">const</span> db = wx.<span class="hljs-property">cloud</span>.<span class="hljs-title function_">database</span>()<br>    <span class="hljs-keyword">const</span> _ = db.<span class="hljs-property">command</span><br>    db.<span class="hljs-title function_">collection</span>(<span class="hljs-string">&#x27;post_collection&#x27;</span>).<span class="hljs-title function_">doc</span>(options.<span class="hljs-property">postid</span>).<span class="hljs-title function_">get</span>(&#123;<br>      <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>)<br>      &#125;<br>    &#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">onItemClick</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">currentTarget</span>.<span class="hljs-property">dataset</span>.<span class="hljs-property">postid</span>)<br>   wx.<span class="hljs-title function_">navigateTo</span>(&#123;<br>     <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;../postdetail/postdetail?postid=&#x27;</span> + e.<span class="hljs-property">currentTarget</span>.<span class="hljs-property">dataset</span>.<span class="hljs-property">postid</span>,<br>   &#125;)<br> &#125;<br></code></pre></td></tr></table></figure><blockquote><p>表单的两种形式</p><p>之前使用:利用双向绑定</p><p>监听输入的值绑定到data里的数据</p><p>按钮监听事件为将这些数据一起处理并调用云函数提交</p><hr><p>标准form:button设置submit属性</p><p>提交时一起提交</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">db.<span class="hljs-title function_">collection</span>(<span class="hljs-string">&#x27;test&#x27;</span>).<span class="hljs-title function_">doc</span>(<span class="hljs-string">&#x27;milk-1&#x27;</span>).<span class="hljs-title function_">set</span>(&#123;<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;milk&#x27;</span>,<br>    <span class="hljs-attr">official</span>: <span class="hljs-string">&#x27;dairy&#x27;</span>,<br>    <span class="hljs-attr">beizhu</span>: <span class="hljs-string">&#x27;test&#x27;</span>,<br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>   <code>//忘记添加await导致函数未生效</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">`await db.collection(&#x27;test&#x27;).doc(event.id).set(&#123;`</span><br><span class="hljs-keyword">var</span> that=<span class="hljs-variable language_">this</span>;<span class="hljs-comment">//进入云函数中this发生了变化,使用this.setData(&#123;&#125;)无效</span><br>wx.<span class="hljs-property">cloud</span>.<span class="hljs-title function_">callFunction</span>(&#123;<br>      <span class="hljs-comment">// 云函数名称</span><br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;get_store_byName&#x27;</span>,<br>    <span class="hljs-comment">//携带的参数:storeName--云函数中使用event.storeName获取</span><br>      <span class="hljs-attr">data</span>:&#123;<br>       <span class="hljs-attr">storeName</span>:that.<span class="hljs-property">data</span>.<span class="hljs-property">storeName</span><br>      &#125;,<br>    <span class="hljs-comment">//成功后执行</span><br>      <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>        <span class="hljs-comment">//提取数据--返回的数据为res.result.云函数处定义的字段名.data</span><br>         <br>        <span class="hljs-keyword">var</span> data = res.<span class="hljs-property">result</span>.<span class="hljs-property">storelist</span>.<span class="hljs-property">data</span> <br>        <span class="hljs-comment">//此处为了简略代码,删去了else情况的操作</span><br>        <span class="hljs-keyword">if</span>(data.<span class="hljs-property">length</span>&gt;<span class="hljs-number">0</span>)&#123;<br>        that.<span class="hljs-title function_">setData</span>(&#123;<br>          <span class="hljs-attr">loadModal</span>:<span class="hljs-literal">false</span>,<br>          <span class="hljs-attr">storelist</span>: data<br>        &#125;)&#125;<br>      &#125;,<br>      <span class="hljs-attr">fail</span>: <span class="hljs-variable language_">console</span>.<span class="hljs-property">error</span><br>    &#125;)<br>  &#125;,<br></code></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> <code>放在标签内和放在value的区别</code></li><li><input disabled="" type="checkbox"> <code>doc返回的是一条值而不是一个列表</code></li><li><input disabled="" type="checkbox"> </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">&quot;-1&quot;</span>  <span class="hljs-attr">bindinput</span>=<span class="hljs-string">&quot;beizhuInput&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#123;&#123;storelist.beizhu&#125;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> <strong>使用set更新其他字段后,未更新的字段name消失</strong></li><li><input disabled="" type="checkbox"> <strong>onLoad里加载数据,从上一层回来时数据不会更新</strong></li><li><input disabled="" type="checkbox"> onshow也不更新</li></ul><p>update 只能更新，set是有则替换，无则插入，覆盖操作</p><p>set()更新字段下的所有数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">await</span> db.<span class="hljs-title function_">collection</span>(<span class="hljs-string">&#x27;hanfuStore&#x27;</span>).<span class="hljs-title function_">doc</span>(event.<span class="hljs-property">id</span>).<span class="hljs-title function_">set</span>(&#123;<br>   <span class="hljs-attr">data</span>: &#123;<br>     <span class="hljs-attr">official</span>: event.<span class="hljs-property">official</span>,<br>     <span class="hljs-attr">beizhu</span>: event.<span class="hljs-property">beizhu</span>,<br>   &#125;<br> <span class="hljs-comment">//事实上重写了data字段</span><br> &#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">1</span>，表示：将style的color的值更新为blue<br><span class="hljs-keyword">const</span> _ = db.<span class="hljs-property">command</span><br>db.<span class="hljs-title function_">collection</span>(<span class="hljs-string">&#x27;todos&#x27;</span>).<span class="hljs-title function_">doc</span>(<span class="hljs-string">&#x27;todo-identifiant-aleatoire&#x27;</span>).<span class="hljs-title function_">update</span>(&#123;<br><span class="hljs-attr">data</span>: &#123;<br> <span class="hljs-attr">style</span>: &#123;<br>   <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;blue&#x27;</span><br> &#125;<br>&#125;,<br><span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) &#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>)<br>&#125;<br>&#125;)<br><br><span class="hljs-number">2</span>，表示：将style的值更新为对象&#123;<span class="hljs-attr">color</span>:blue&#125;<br><span class="hljs-keyword">const</span> _ = db.<span class="hljs-property">command</span><br>db.<span class="hljs-title function_">collection</span>(<span class="hljs-string">&#x27;todos&#x27;</span>).<span class="hljs-title function_">doc</span>(<span class="hljs-string">&#x27;todo-identifiant-aleatoire&#x27;</span>).<span class="hljs-title function_">update</span>(&#123;<br><span class="hljs-attr">data</span>: &#123;<br>   <span class="hljs-comment">//style的值更新为对象&#123;color:blue&#125;</span><br>   <span class="hljs-comment">//重写了style字段,而不是data字段</span><br> <span class="hljs-attr">style</span>: _.<span class="hljs-title function_">set</span>(&#123;<br>   <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;blue&#x27;</span><br> &#125;)<br>&#125;,<br><span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) &#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>)<br>&#125;<br>&#125;)<br><span class="hljs-comment">//结果看起来一样，其实性能1更高些。</span><br></code></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> 固定在页面左侧不随滑动改变的按钮</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">position</span>: fixed;<br>    <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;<span class="hljs-comment">/*设置悬浮优先级为最高,否则会被覆盖而看不到*/</span><br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">40%</span>;<br>    <span class="hljs-attribute">background-blend-mode</span>: color-burn;<br>    <span class="hljs-comment">/* top: 60%; */</span><br>   <br></code></pre></td></tr></table></figure><ul><li><p>padding缩写:上右下左</p></li><li><blockquote><blockquote><p>小程序端与云函数端的表现会有如下差异：</p><ul><li>小程序端：注意与集合权限设置有关，一个用户仅能统计其有<strong>读权限</strong>的记录数</li><li>云函数端：因属于管理端，因此可以统计集合的所有记录数</li></ul></blockquote></blockquote></li></ul><ul><li><p><input disabled="" type="checkbox"> <code>improve</code>查询–修改–页面同所有店铺页面分开–不具备翻页功能</p></li><li><p><input disabled="" type="checkbox"> <code>所有正店</code> <code>所有山店</code>  页面</p></li><li><p><input disabled="" type="checkbox"> </p></li><li><p><input disabled="" type="checkbox"> </p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">showQrcode</span>(<span class="hljs-params"></span>) &#123;<br>    wx.<span class="hljs-title function_">previewImage</span>(&#123;<br>      <span class="hljs-attr">urls</span>: [<span class="hljs-string">&#x27;https://6865-helloyun-4ge5h4wyc91f5778-1304890457.tcb.qcloud.la/myQrCode/money.jpg?sign=0148353eddb814548368e3db70dd26ee&amp;t=1614000653&#x27;</span>],<br>      <span class="hljs-attr">current</span>: <span class="hljs-string">&#x27;https://6865-helloyun-4ge5h4wyc91f5778-1304890457.tcb.qcloud.la/myQrCode/money.jpg?sign=0148353eddb814548368e3db70dd26ee&amp;t=1614000653&#x27;</span> <span class="hljs-comment">// 当前显示图片的http链接      </span><br>    &#125;)<br>  &#125;,<br></code></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> 设置的弹窗为flase未生效</li></ul><p>  <code>云函数success的内容更改,更新云函数后才生效</code></p><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">wx.<span class="hljs-property">cloud</span>.<span class="hljs-title function_">callFunction</span>(&#123;<br>     <span class="hljs-comment">// 云函数名称</span><br>     <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;get_store_list&#x27;</span>,<br>     <span class="hljs-attr">data</span>:&#123;<br>       <span class="hljs-attr">pages</span>:pages<br>     &#125;,<br>   <span class="hljs-comment">//携带的参数:storeName--云函数中使用event.storeName获取</span><br>   <span class="hljs-comment">//成功后执行</span><br>     <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>       <span class="hljs-keyword">var</span> data = res.<span class="hljs-property">result</span>.<span class="hljs-property">storeList</span>.<span class="hljs-property">data</span> <br>       that.<span class="hljs-title function_">setData</span>(&#123;<br>         <span class="hljs-comment">//此处设置一个加载中弹窗,区分删除确认弹窗</span><br>         <span class="hljs-attr">loadModel2</span>:<span class="hljs-literal">false</span>,<br>         <span class="hljs-attr">storelist</span>: data<br>       &#125;)<br>     &#125;,<br>     <span class="hljs-attr">fail</span>: <span class="hljs-variable language_">console</span>.<span class="hljs-property">error</span><br>   &#125;)<br></code></pre></td></tr></table></figure><pre><code class="hljs">- [ ] 更新日志每次更新才会有,不需要云端更新数据库,采用静态html- [ ] 滚动公共栏</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.<span class="hljs-title function_">collection</span>(<span class="hljs-string">&#x27;admin&#x27;</span>).<span class="hljs-title function_">doc</span>(<span class="hljs-string">&#x27;admin81192&#x27;</span>).<span class="hljs-title function_">field</span>(&#123;<br>  <span class="hljs-attr">password</span>:<span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">_id</span>:<span class="hljs-literal">false</span><br>&#125;).<span class="hljs-title function_">get</span>()<br><br></code></pre></td></tr></table></figure><blockquote><p>云函数的返回格式:res.result.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js">wx.<span class="hljs-property">cloud</span>.<span class="hljs-title function_">callFunction</span>(&#123;<br>     <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;check_admin&#x27;</span>,<br>     <span class="hljs-attr">data</span>: &#123;<br>       <span class="hljs-attr">username</span>: that.<span class="hljs-property">data</span>.<span class="hljs-property">username</span>,<br>       <span class="hljs-attr">password</span>:that.<span class="hljs-property">data</span>.<span class="hljs-property">password</span>,<br>     &#125;,<br>     <span class="hljs-attr">complete</span>: <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>      that.<span class="hljs-title function_">setData</span>(&#123;<br>        <span class="hljs-attr">checkres</span>:res.<span class="hljs-property">result</span><br>      &#125;)<br>          <span class="hljs-keyword">if</span>(that.<span class="hljs-property">data</span>.<span class="hljs-property">checkres</span>.<span class="hljs-property">res</span>)&#123;<br>       wx.<span class="hljs-title function_">navigateTo</span>(&#123;<br>         <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/pages/admin/home&#x27;</span>,<br>       &#125;)<br>     &#125;<br>     <span class="hljs-keyword">else</span><br>     <span class="hljs-comment">//跳转回主页面</span><br>     &#123;<br>      that.<span class="hljs-title function_">setData</span>(&#123;<br>       <span class="hljs-attr">loadModal</span>:<span class="hljs-literal">true</span><br>      &#125;)<br>         <span class="hljs-comment">//放在compelete外报错:res为null,不知道是不是因为云函数异步调用还未结束</span><br>     &#125;<br>     &#125;,<br>   &#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">查山正微信小程序开发日志</summary>
    
    
    
    <category term="demo" scheme="https://darksheep404.github.io/categories/demo/"/>
    
    
    <category term="demo" scheme="https://darksheep404.github.io/tags/demo/"/>
    
    <category term="微信小程序" scheme="https://darksheep404.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    <category term="云开发" scheme="https://darksheep404.github.io/tags/%E4%BA%91%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>转载：MVC，MVP 和 MVVM 的图示</title>
    <link href="https://darksheep404.github.io/2020/12/03/MVC,MVP%E5%92%8CMMM%E7%9A%84%E5%9B%BE%E7%A4%BA/"/>
    <id>https://darksheep404.github.io/2020/12/03/MVC,MVP%E5%92%8CMMM%E7%9A%84%E5%9B%BE%E7%A4%BA/</id>
    <published>2020-12-03T16:10:18.000Z</published>
    <updated>2025-05-27T11:20:30.779Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html">转载：MVC，MVP 和 MVVM 的图示</a></p><blockquote><p>复杂的软件必须有清晰合理的架构，否则无法开发和维护。</p><p><a href="http://zh.wikipedia.org/wiki/MVC">MVC</a>（Model-View-Controller）是最常见的软件架构之一，业界有着广泛应用。它本身<a href="http://www.ruanyifeng.com/blog/2007/11/mvc.html">很容易理解</a>，但是要讲清楚，它与衍生的 MVP 和 MVVM 架构的区别就不容易了。</p></blockquote><h2 id="一、MVC"><a href="#一、MVC" class="headerlink" title="一、MVC"></a>一、MVC</h2><p>MVC模式的意思是，软件可以分成三个部分。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015020104.png" alt="img"></p><blockquote><ul><li>视图（View）：用户界面。</li><li>控制器（Controller）：业务逻辑</li><li>模型（Model）：数据保存</li></ul></blockquote><p>各部分之间的通信方式如下。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015020105.png" alt="img"></p><blockquote><ol><li>View 传送指令到 Controller</li><li>Controller 完成业务逻辑后，要求 Model 改变状态</li><li>Model 将新的数据发送到 View，用户得到反馈</li></ol></blockquote><p>所有通信都是单向的。</p><h2 id="二、互动模式"><a href="#二、互动模式" class="headerlink" title="二、互动模式"></a>二、互动模式</h2><p>接受用户指令时，MVC 可以分成两种方式。一种是通过 View 接受指令，传递给 Controller。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015020106.png" alt="img"></p><p>另一种是直接通过controller接受指令。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015020107.png" alt="img"></p><h2 id="三、实例：Backbone"><a href="#三、实例：Backbone" class="headerlink" title="三、实例：Backbone"></a>三、实例：Backbone</h2><p>实际项目往往采用更灵活的方式，以 <a href="http://documentcloud.github.com/backbone">Backbone.js</a> 为例。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015020108.png" alt="img"></p><blockquote><ol><li><p>用户可以向 View 发送指令（DOM 事件），再由 View 直接要求 Model 改变状态。</p></li><li><p>用户也可以直接向 Controller 发送指令（改变 URL 触发 hashChange 事件），再由 Controller 发送给 View。</p></li><li><p>Controller 非常薄，只起到路由的作用，而 View 非常厚，业务逻辑都部署在 View。所以，Backbone 索性取消了 Controller，只保留一个 Router（路由器） 。</p></li></ol></blockquote><h2 id="四、MVP"><a href="#四、MVP" class="headerlink" title="四、MVP"></a>四、MVP</h2><p>MVP 模式将 Controller 改名为 Presenter，同时改变了通信方向。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015020109.png" alt="img"></p><blockquote><ol><li><p>各部分之间的通信，都是双向的。</p></li><li><p>View 与 Model 不发生联系，都通过 Presenter 传递。</p></li><li><p>View 非常薄，不部署任何业务逻辑，称为”被动视图”（Passive View），即没有任何主动性，而 Presenter非常厚，所有逻辑都部署在那里。</p></li></ol></blockquote><h2 id="五、MVVM"><a href="#五、MVVM" class="headerlink" title="五、MVVM"></a>五、MVVM</h2><p>MVVM 模式将 Presenter 改名为 ViewModel，基本上与 MVP 模式完全一致。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015020110.png" alt="img"></p><p>唯一的区别是，它采用双向绑定（data-binding）：View的变动，自动反映在 ViewModel，反之亦然。<a href="https://angularjs.org/">Angular</a> 和 <a href="http://emberjs.com/">Ember</a> 都采用这种模式。</p><blockquote><p>vue也可以双向绑定？</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html&quot;&gt;转载：MVC，MVP 和 MVVM 的图示&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;复杂的软件必须有清晰合理的架构，否则无法开发和维护</summary>
      
    
    
    
    <category term="分享" scheme="https://darksheep404.github.io/categories/%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="拜读" scheme="https://darksheep404.github.io/tags/%E6%8B%9C%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>Docker初窥+nginx</title>
    <link href="https://darksheep404.github.io/2020/12/03/docker&amp;nginx/"/>
    <id>https://darksheep404.github.io/2020/12/03/docker&amp;nginx/</id>
    <published>2020-12-03T15:20:18.000Z</published>
    <updated>2025-05-27T11:20:30.779Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本学期第十四周：</p></blockquote><p><a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html">阮一峰：Docker入门教程</a></p><h2 id="Docker初窥-nginx"><a href="#Docker初窥-nginx" class="headerlink" title="Docker初窥+nginx"></a>Docker初窥+nginx</h2><h4 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h4><p><code>软件运行需要环境配置。换一台机器就要重新配置</code></p><p><strong>希望</strong>：<strong>软件可以带环境安装：安装时把运行所需环境复制过来</strong></p><p>已有解决方案：虚拟机，Linux容器</p><ul><li><p>虚拟机：独占一部分内存和硬盘空间，运行时其他程序不能使用</p></li><li><ul><li><strong>资源占用多</strong>：哪怕应用程序真正使用只有1mb，虚拟机也需要几百mb才能运行</li><li><strong>多余步骤多</strong>：虚拟机是完整操作系统，无法跳过用户登录等“系统级别操作步骤”</li><li><strong>启动慢</strong>：启动速度等于操作系统</li></ul></li><li><p>Linux容器</p></li><li><ul><li><p><strong>不模拟完整操作系统，而是对进程进行隔离</strong></p></li><li><blockquote><p>或者说，在正常进程的外面套了一个<a href="https://opensource.com/article/18/1/history-low-level-container-runtimes">保护层</a>。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。</p><p>由于容器是进程级别的，相比虚拟机有很多优势。</p></blockquote></li><li><p><strong>启动快</strong>：启动进程而不是启动操作系统</p></li><li><p><strong>资源占用少</strong>：只占用需要的资源，多个容器可以共享资源，不想虚拟机要独享</p></li><li><p><strong>体积小</strong>：只包含用到的组件即可，不需要打包整个操作系统</p></li></ul></li></ul><h3 id="Docker是什么"><a href="#Docker是什么" class="headerlink" title="Docker是什么"></a>Docker是什么</h3><blockquote><p><strong>Linux容器的一种封装，提供简单易用的容器使用接口，当前最流行的方案</strong></p></blockquote><ul><li>可以方便的创建和使用容器，把软件放入容器</li><li>容器可以进行版本管理，复制，分享，修改</li></ul><h4 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h4><ul><li><strong>提供一次性环境</strong>：如测试</li><li><strong>提供弹性的云服务</strong>：Docker容器可以随开随关，适合动态扩容和缩容</li><li><strong>组建微服务架构</strong>：一个机器可以通过多个容器跑多个服务，在本机就可以模拟出微服务架构</li></ul><h3 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><blockquote><p>有社区版和企业版，个人开发者社区版够用</p><p>Windows，ubuntu，mac等都有</p></blockquote><h4 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h4><p>Q:</p><blockquote><p> Q:不同操作系统上Docker是否有区别，linux上的Docker容器是否可以跑在linux上</p></blockquote><p>A:</p><blockquote><p>A:未知</p><p>由下文有Ubuntu镜像+apahce</p><p>容器内镜像类似小型虚拟机？与容器外操作系统无关？</p></blockquote><h5 id="安装成功后"><a href="#安装成功后" class="headerlink" title="安装成功后"></a>安装成功后</h5><ul><li>运行命令验证</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ docker version<br><span class="hljs-comment"># 或者</span><br>$ docker inf<br></code></pre></td></tr></table></figure><ul><li>docker需要用户有sudo权限，避免每次输入sudo，可以把用户加入docke用户组</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo usermod -aG docker <span class="hljs-variable">$USER</span><br></code></pre></td></tr></table></figure><ul><li>Docker 是服务器—-客户端架构。命令行运行<code>docker</code>命令的时候，需要本机有 Docker 服务。如果服务没有启动，可以用下面的命令启动</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># service 命令的用法</span><br>$ sudo service docker start<br><br><span class="hljs-comment"># systemctl 命令的用法</span><br>$ sudo systemctl start docker<br></code></pre></td></tr></table></figure><h4 id="image文件"><a href="#image文件" class="headerlink" title="image文件"></a>image文件</h4><p><strong>应用程序及其依赖，打包在 image 文件里面</strong></p><ul><li><p>通过这个文件，才能生成 Docker 容器</p></li><li><p>可以看作是容器的模板</p></li><li><p>实际开发中，<strong>一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而生成</strong>。</p><blockquote><p>你可以在 Ubuntu 的 image 基础上，往里面加入 Apache 服务器，形成你的 image。</p></blockquote><p>Q：</p><blockquote><p> Ubuntu 的 image不也是一个操作系统？</p></blockquote></li><li><p>尽量使用别人制作好的，或者基于别人的加工</p></li></ul><blockquote><p>一般来说，为了节省时间，我们应该尽量使用别人制作好的 image 文件，而不是自己制作。即使要定制，也应该基于别人的 image 文件进行加工，而不是从零开始制作。</p></blockquote><hr><h3 id="实操："><a href="#实操：" class="headerlink" title="实操："></a>实操：</h3><ul><li>下载一个镜像并运行</li><li>停止程序</li><li>停止服务型容器</li><li>终止和删除容器文件</li><li>制作自己的docker容器？镜像</li><li>其他有用的命令</li></ul><h3 id="待续"><a href="#待续" class="headerlink" title="待续"></a>待续</h3><h3 id="Docker微服务教程：架设wordpress网站"><a href="#Docker微服务教程：架设wordpress网站" class="headerlink" title="Docker微服务教程：架设wordpress网站"></a><a href="http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html">Docker微服务教程：架设wordpress网站</a></h3><blockquote><ul><li>方法 A：自建 WordPress 容器</li><li>方法 B：采用官方的 WordPress 容器</li><li>方法 C：采用 Docker Compose 工具</li></ul></blockquote><h1 id="Nginx-docker容器教程"><a href="#Nginx-docker容器教程" class="headerlink" title="Nginx docker容器教程"></a><a href="http://www.ruanyifeng.com/blog/2018/02/nginx-docker.html">Nginx docker容器教程</a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本学期第十四周：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html&quot;&gt;阮一峰：Docker入门教程&lt;/a&gt;&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="分享" scheme="https://darksheep404.github.io/categories/%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="拜读" scheme="https://darksheep404.github.io/tags/%E6%8B%9C%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>webSocket初探</title>
    <link href="https://darksheep404.github.io/2020/12/03/webSocket%E5%88%9D%E7%AA%A5/"/>
    <id>https://darksheep404.github.io/2020/12/03/webSocket%E5%88%9D%E7%AA%A5/</id>
    <published>2020-12-03T15:20:18.000Z</published>
    <updated>2025-05-27T11:20:30.780Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="http://websocket.org/">WebSocket</a> 是一种网络通信协议，很多高级功能都需要它</p></blockquote><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><ul><li><p>已经有了 HTTP 协议，为什么还需要另一个协议？</p></li><li><p>因为 HTTP 协议有一个缺陷：通信只能由客户端发起。</p></li></ul><blockquote><p>举例来说，我们想了解今天的天气，只能是*  客户端向服务器发出请求</p><p>服务器返回查询结果。</p><p>HTTP 协议做不到服务器主动向客户端推送信息。</p></blockquote><p><strong>单向请求的</strong>特点，</p><ul><li><p>注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。</p></li><li><p>我们只能使用<a href="https://www.pubnub.com/blog/2014-12-01-http-long-polling/">“轮询”</a>：每隔一段时候，就发出一个询问，了解服务器有没有新的信息。最典型的场景就是聊天室。</p></li><li><p>轮询的效率低，非常浪费资源（因为必须不停连接，或者 HTTP 连接始终打开</p></li></ul><h3 id="webSocket"><a href="#webSocket" class="headerlink" title="webSocket"></a>webSocket</h3><blockquote><p>WebSocket 协议在2008年诞生，2011年成为国际标准。所有浏览器都已经支持了</p></blockquote><blockquote><p>服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于<a href="https://en.wikipedia.org/wiki/Push_technology">服务器推送技术</a>的一种。</p></blockquote><p>其他特点包括：</p><p>（1）建立在 TCP 协议之上，服务器端的实现比较容易。</p><p>（2）<strong>与 HTTP 协议有着良好的兼容性。默认端口也是80和443</strong>，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。</p><h4 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="(Q&amp;A)"></a>(Q&amp;A)</h4><blockquote><p>现在http已经被https取代</p><p>与http兼容是否会导致落后</p><p>A</p></blockquote><p>A：</p><blockquote><p>2008年诞生，应该不会？</p><p>下文（6）:wss应该对应https</p></blockquote><p>（3）数据格式比较轻量，性能开销小，通信高效。</p><p>（4）可以发送文本，也可以发送二进制数据。</p><p>（5）没有同源限制，客户端可以与任意服务器通信。</p><p>（6）协议标识符是<code>ws</code>（如果加密，则为<code>wss</code>），服务器网址就是 URL。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markup"><br></code></pre></td></tr></table></figure></blockquote><p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017051503.jpg" alt="img"></p><h3 id="使用实例-待续"><a href="#使用实例-待续" class="headerlink" title="使用实例:待续"></a>使用实例:待续</h3><h3 id="Q：http2-0也有推送，这两者的关系是什么？"><a href="#Q：http2-0也有推送，这两者的关系是什么？" class="headerlink" title="Q：http2.0也有推送，这两者的关系是什么？"></a>Q：http2.0也有推送，这两者的关系是什么？</h3><blockquote><p>? HTTP&#x2F;2 只能推送静态资源，无法推送指定的信息。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://websocket.org/&quot;&gt;WebSocket&lt;/a&gt; 是一种网络通信协议，很多高级功能都需要它&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;header</summary>
      
    
    
    
    <category term="分享" scheme="https://darksheep404.github.io/categories/%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="拜读" scheme="https://darksheep404.github.io/tags/%E6%8B%9C%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>vue井字棋小游戏</title>
    <link href="https://darksheep404.github.io/2020/11/26/vue%E4%BA%95%E5%AD%97%E6%A3%8B%E5%B0%8F%E6%B8%B8%E6%88%8Fdemo/"/>
    <id>https://darksheep404.github.io/2020/11/26/vue%E4%BA%95%E5%AD%97%E6%A3%8B%E5%B0%8F%E6%B8%B8%E6%88%8Fdemo/</id>
    <published>2020-11-26T15:33:18.000Z</published>
    <updated>2025-05-27T11:20:30.780Z</updated>
    
    <content type="html"><![CDATA[<h3 id="井字棋"><a href="#井字棋" class="headerlink" title="井字棋"></a>井字棋</h3><p><code>使用vue</code></p><h4 id="本站预览链接"><a href="#本站预览链接" class="headerlink" title="本站预览链接"></a><a href="https://darksheep.xyz/game01/">本站预览链接</a></h4><h4 id="GitHub单网页预览链接"><a href="#GitHub单网页预览链接" class="headerlink" title="GitHub单网页预览链接"></a>GitHub单网页预览链接</h4><blockquote><p>待补充</p></blockquote><p><strong>tips</strong></p><blockquote><p>网页制作之初是单独作为一个网页设计，现在挂靠在博客的右边栏</p><p>胜利后的布局出现稍微错乱</p></blockquote><h3 id="一个旋转的太极"><a href="#一个旋转的太极" class="headerlink" title="一个旋转的太极"></a>一个旋转的太极</h3><h4 id="本站预览链接-1"><a href="#本站预览链接-1" class="headerlink" title="本站预览链接"></a><a href="https://darksheep.xyz/taiji/">本站预览链接</a></h4><p><code>使用html css</code></p><blockquote><p>利用html和css制作的一个简单的太极单页面</p><ul><li>不清楚是否也会同本页面发生冲突</li></ul></blockquote><h3 id="vue打包发布"><a href="#vue打包发布" class="headerlink" title="vue打包发布"></a>vue打包发布</h3><blockquote><p>vue打包成html</p><p><code>yarn build</code> or <code>npm run build</code></p><p>vue打包dist目录下index.html打开空白</p><p>根目录下新建<code>vue.config.js</code>，填入以下代码</p><blockquote><p>vue cli3.0后此文件隐藏，不在根目录下，可以自己手动新建文件覆盖相应配置</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">lintOnSave</span>: <span class="hljs-literal">true</span>,<br><br>    <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&#x27;./&#x27;</span>,<br>    <span class="hljs-attr">outputDir</span>: <span class="hljs-string">&#x27;dist&#x27;</span>,<br>    <span class="hljs-attr">assetsDir</span>: <span class="hljs-string">&#x27;static&#x27;</span><br>&#125;<br><br></code></pre></td></tr></table></figure></blockquote><h3 id="井字棋demo源码"><a href="#井字棋demo源码" class="headerlink" title="井字棋demo源码"></a>井字棋demo源码</h3><h4 id="app-vue"><a href="#app-vue" class="headerlink" title="app.vue"></a>app.vue</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id=&quot;app&quot;&gt;<br>    &lt;div id=&quot;res&quot; v-if=&quot;win&quot;&gt;游戏结束，获胜者是：&#123;&#123; winner &#125;&#125;&lt;/div&gt;<br>    &lt;div class=&quot;row&quot;&gt;<br>      &lt;cell @click=&quot;onclickCell(0, $event)&quot; :n=&quot;n&quot; /&gt;<br>      &lt;cell @click=&quot;onclickCell(1, $event)&quot; :n=&quot;n&quot; /&gt;<br>      &lt;cell @click=&quot;onclickCell(2, $event)&quot; :n=&quot;n&quot; /&gt;<br>    &lt;/div&gt;<br>    &lt;div class=&quot;row&quot;&gt;<br>      &lt;cell @click=&quot;onclickCell(3, $event)&quot; :n=&quot;n&quot; /&gt;<br>      &lt;cell @click=&quot;onclickCell(4, $event)&quot; :n=&quot;n&quot; /&gt;<br>      &lt;cell @click=&quot;onclickCell(5, $event)&quot; :n=&quot;n&quot; /&gt;<br>    &lt;/div&gt;<br>    &lt;div class=&quot;row&quot;&gt;<br>      &lt;cell @click=&quot;onclickCell(6, $event)&quot; :n=&quot;n&quot; /&gt;<br>      &lt;cell @click=&quot;onclickCell(7, $event)&quot; :n=&quot;n&quot; /&gt;<br>      &lt;cell @click=&quot;onclickCell(8, $event)&quot; :n=&quot;n&quot; /&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import cell from &quot;./cell&quot;;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      cells: [<br>        [1, 1, 1],<br>        [1, 1, 1],<br>        [1, 1, 1],<br>      ],<br>      /*  <br>      写成如下没带逗号出现bug，影响到n的赋值，但是如下代码null批量替换成1后代码也可以运行<br>      cells: [[null, null, null] <br>      [(null, null, null)]<br><br>      [(null, null, null)]], */<br>      n: 0,<br>      win: false,<br>      winner: null,<br>    &#125;;<br>  &#125;,<br>  components: &#123; cell &#125;,<br>  methods: &#123;<br>    onclickCell(i, text) &#123;<br>      console.log(`$&#123;i&#125;号被点击，内容是$&#123;text&#125;`); //插入变量是用反单引号括起来<br>      this.cells[Math.floor(i / 3)][i % 3] = text;<br>      this.n = this.n + 1;<br>      this.tell();<br>      if (this.win === true) &#123;<br>        //此处误写掉括号，一直判定成true<br>        this.winner = text;<br>        console.log(`获胜者是$&#123;text&#125;`);<br>      &#125; else &#123;<br>        console.log(&quot;胜负未定&quot;);<br>      &#125;<br>    &#125;,<br>    tell() &#123;<br>      const cells = this.cells;<br>      for (let i = 0; i &lt; 2; i++) &#123;<br>        if (<br>          cells[i][0] === cells[i][1] &amp;&amp;<br>          cells[i][0] === cells[i][2] &amp;&amp;<br>          cells[i][0] !== 1<br>        ) &#123;<br>          this.win = true;<br>        &#125;<br>      &#125;<br>      for (let j = 0; j &lt; 2; j++) &#123;<br>        if (<br>          cells[0][j] === cells[1][j] &amp;&amp;<br>          cells[0][j] === cells[2][j] &amp;&amp;<br>          cells[0][j] !== 1<br>        ) &#123;<br>          this.win = true;<br>        &#125;<br>      &#125;<br>      if (<br>        cells[0][0] !== 1 &amp;&amp;<br>        cells[2][2] == cells[0][0] &amp;&amp;<br>        cells[1][1] === cells[2][2]<br>      ) &#123;<br>        this.win = true;<br>      &#125;<br>      if (<br>        cells[0][2] !== 1 &amp;&amp;<br>        cells[1][1] == cells[2][0] &amp;&amp;<br>        cells[0][2] === cells[1][1]<br>      ) &#123;<br>        this.win = true;<br>      &#125;<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>.row &#123;<br>  display: flex;<br>  justify-content: center;<br>  align-items: center;<br>&#125;<br>#res &#123;<br>  border: 1px solid red;<br>  background: lightblue;<br>  position: absolute;<br>  height: 374px;<br>  width: 100%;<br>  display: flex;<br>  justify-content: center;<br>  align-items: center;<br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><h4 id="cell-vue"><a href="#cell-vue" class="headerlink" title="cell.vue"></a>cell.vue</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id=&quot;cell&quot; v-on:click=&quot;onclickself&quot;&gt;<br>    &lt;template v-if=&quot;a&quot;&gt;&#123;&#123; text &#125;&#125;&lt;/template&gt;<br>    &lt;template v-else&gt;&lt;/template&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>//node中向外暴露成员：moudule.exports=&#123;&#125;和exports，导入模块：var 名称=require(&#x27;标识符&#x27;)<br>//ES6中导入：import xxx form xx，导出：export default和export 向外暴露<br>//两种不能混用<br>//export导出，导入时要加&#123;&#125;:按需导出，export 可以向外导出多个成员，import时如果不需要，可以不在&#123;&#125;中定义<br>//export导出的成员，导入时必须严格按照名称&#123;&#125;按需接受 想换名字可以使用as 起别名<br>// export default 导出的成员，可以使用任意变量接收，导入时不需要加&#123;&#125; 一个文件中，export可以有多个，export default只可以有一个<br>export default &#123;<br>  //父组件使用v-bind或简化指令传递数据给子组件<br>  //子组件通过props接收，只能读不能更改<br>  props: [&quot;n&quot;],<br>  data() &#123;<br>    //:() =&gt; &#123;<br>    //function()&#123;&#125;<br>    //return (x = 1);<br>    return &#123; a: false, text: &quot;o&quot; &#125;;<br>  &#125;,<br>  methods: &#123;<br>    onclickself() &#123;<br>      if (this.a === true) &#123;<br>        return;<br>      &#125; else &#123;<br>        this.a = true;<br>        this.text = this.n % 2 === 0 ? &quot;x&quot; : &quot;o&quot;;<br>        //父组件通过v-on把其方法引用传递给子组件，子组件通过$emit,调用父组件方法，并把数据传给父组件使用<br>        this.$emit(&quot;click&quot;, this.text);<br>      &#125;<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>#cell &#123;<br>  border: 1px solid black;<br>  width: 100px;<br>  height: 100px;<br>  display: flex;<br>  justify-content: center;<br>  align-items: center;<br>  font-size: 80px;<br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><h4 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>),<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>doucument<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-keyword">@keyframes</span> x &#123;</span><br><span class="language-css">      <span class="hljs-selector-tag">from</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0deg</span>);</span><br><span class="language-css">      &#125;</span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-tag">to</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">360deg</span>);</span><br><span class="language-css">      &#125;</span><br><span class="language-css"></span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    * &#123;</span><br><span class="language-css">      <span class="hljs-comment">/*background: #eee;*/</span></span><br><span class="language-css">      <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">background</span>: <span class="hljs-number">#eee</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    #八卦 &#123;</span><br><span class="language-css">      <span class="hljs-comment">/*border:1px solid red;*/</span></span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">      <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">      <span class="hljs-attribute">animation</span>: x <span class="hljs-number">1s</span> infinite linear;</span><br><span class="language-css">      <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">3px</span> <span class="hljs-number">0px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.75</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    #八卦&gt;<span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) &#123;</span><br><span class="language-css">      <span class="hljs-comment">/*border:10px solid green;*/</span></span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">      <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">      <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">background</span>: white;</span><br><span class="language-css"></span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    #八卦&gt;<span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:first</span>-child &#123;</span><br><span class="language-css">      <span class="hljs-comment">/*border:10px solid yellow;*/</span></span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">      <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">      <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">background</span>: black;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    #八卦&gt;<span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>) &#123;</span><br><span class="language-css">      <span class="hljs-comment">/*border:10px solid green;*/</span></span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">      <span class="hljs-comment">/*right: 0;此处多写了一个右边，但是好像没影响*/</span></span><br><span class="language-css">      <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">      <span class="hljs-attribute">background</span>: black;</span><br><span class="language-css">      <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">100px</span>;</span><br><span class="language-css"></span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    #八卦&gt;<span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">4</span>) &#123;</span><br><span class="language-css">      <span class="hljs-comment">/*border:10px solid green;*/</span></span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">      <span class="hljs-attribute">right</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">      <span class="hljs-attribute">background</span>: white;</span><br><span class="language-css">      <span class="hljs-attribute">margin-right</span>: -<span class="hljs-number">100px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css"></span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    #八卦&gt;<span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">5</span>) &#123;</span><br><span class="language-css">      <span class="hljs-comment">/*上小白圆*/</span></span><br><span class="language-css">      <span class="hljs-comment">/*border:10px solid green;*/</span></span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">12.5%</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">12.5%</span>;</span><br><span class="language-css">      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">      <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">      <span class="hljs-attribute">background</span>: white;</span><br><span class="language-css">      <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">6.25%</span>;</span><br><span class="language-css">      <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">6.25%</span>;</span><br><span class="language-css">      <span class="hljs-attribute">top</span>: <span class="hljs-number">12.5%</span>;</span><br><span class="language-css"></span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    #八卦&gt;<span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">6</span>) &#123;</span><br><span class="language-css">      <span class="hljs-comment">/*下小白圆*/</span></span><br><span class="language-css">      <span class="hljs-comment">/*border:10px solid green;*/</span></span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">12.5%</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">12.5%</span>;</span><br><span class="language-css">      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">      <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">      <span class="hljs-attribute">background</span>: black;</span><br><span class="language-css">      <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">6.25%</span>;</span><br><span class="language-css">      <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">6.25%</span>;</span><br><span class="language-css">      <span class="hljs-attribute">bottom</span>: <span class="hljs-number">12.5%</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    #八卦-wrapper &#123;</span><br><span class="language-css">      <span class="hljs-attribute">border</span>: solid <span class="hljs-number">1px</span> red;</span><br><span class="language-css">      <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">      <span class="hljs-attribute">justify-content</span>: center;</span><br><span class="language-css">      <span class="hljs-attribute">align-items</span>: center;</span><br><span class="language-css">      <span class="hljs-attribute">flex-direction</span>: column;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-id">#txt</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">1em</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;八卦-wrapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;八卦&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txt&quot;</span>&gt;</span>道可道，非常道<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;井字棋&quot;&gt;&lt;a href=&quot;#井字棋&quot; class=&quot;headerlink&quot; title=&quot;井字棋&quot;&gt;&lt;/a&gt;井字棋&lt;/h3&gt;&lt;p&gt;&lt;code&gt;使用vue&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;本站预览链接&quot;&gt;&lt;a href=&quot;#本站预览链接&quot; class=&quot;he</summary>
      
    
    
    
    <category term="前端" scheme="https://darksheep404.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="demo" scheme="https://darksheep404.github.io/tags/demo/"/>
    
    <category term="vue" scheme="https://darksheep404.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>文章&amp;博客拜读学习</title>
    <link href="https://darksheep404.github.io/2020/11/25/%E4%B8%80%E4%BA%9B%E6%8B%9C%E8%AF%BB%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%96%87%E7%AB%A0or%E5%8D%9A%E5%AE%A2/"/>
    <id>https://darksheep404.github.io/2020/11/25/%E4%B8%80%E4%BA%9B%E6%8B%9C%E8%AF%BB%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%96%87%E7%AB%A0or%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-11-25T16:20:18.000Z</published>
    <updated>2025-05-27T11:20:30.780Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>传说中的：去我的收藏夹里吃灰吧</p></blockquote><h3 id="Phodal"><a href="#Phodal" class="headerlink" title="Phodal"></a><a href="https://www.phodal.com/">Phodal</a></h3><p><code>全栈，前端，开源，物联网</code></p><blockquote><p>读过&amp;待重读</p></blockquote><h4 id="Phodal’s-Idea实战指南"><a href="#Phodal’s-Idea实战指南" class="headerlink" title="Phodal’s Idea实战指南"></a><a href="http://ideabook.phodal.com/">Phodal’s Idea实战指南</a></h4><h4 id="GitHub漫游指南"><a href="#GitHub漫游指南" class="headerlink" title="GitHub漫游指南"></a><a href="http://github.phodal.com/">GitHub漫游指南</a></h4><h3 id="阮一峰的开发者手册"><a href="#阮一峰的开发者手册" class="headerlink" title="阮一峰的开发者手册"></a><a href="http://www.ruanyifeng.com/blog/developer/">阮一峰的开发者手册</a></h3><h3 id="待整理"><a href="#待整理" class="headerlink" title="待整理~~~"></a>待整理~~~</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;传说中的：去我的收藏夹里吃灰吧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Phodal&quot;&gt;&lt;a href=&quot;#Phodal&quot; class=&quot;headerlink&quot; title=&quot;Phodal&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://w</summary>
      
    
    
    
    <category term="分享" scheme="https://darksheep404.github.io/categories/%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="分享" scheme="https://darksheep404.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>随机获取猫图APP</title>
    <link href="https://darksheep404.github.io/2020/11/24/%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E7%8C%AB%E5%9B%BEAPP/"/>
    <id>https://darksheep404.github.io/2020/11/24/%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E7%8C%AB%E5%9B%BEAPP/</id>
    <published>2020-11-24T15:20:18.000Z</published>
    <updated>2025-05-27T11:20:30.780Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="安卓实验-随机猫图"><a href="#安卓实验-随机猫图" class="headerlink" title="安卓实验:随机猫图"></a>安卓实验:随机猫图</h2><blockquote><p> 安卓实验:随机猫图:cat:</p></blockquote><blockquote><p>使用技术：RecycleView，Glide</p></blockquote><h3 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h3><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/20201006/20201124224447.jpg" alt="Screenshot_20201124_224008_com.demo.catws"></p><h3 id="遇到的待解决的问题"><a href="#遇到的待解决的问题" class="headerlink" title="遇到的待解决的问题"></a>遇到的待解决的问题</h3><ul><li><code>Oncreate</code>里给<code>RecycleView</code>传入了八张初始图片，并没有按照瀑布流显示，而是排成了一行</li><li>运行点击函数后才刷新成设置的两列</li></ul><blockquote><p>拟解决办法，<code>oncreate</code>里面调用一个刷新函数，函数执行<code>notifyItemChanged(0)</code></p><blockquote><p>实际未改变，希望他刷新布局</p></blockquote><blockquote><p>并未解决</p></blockquote></blockquote><p>* </p><ul><li><p>点击函数里清空了items数组，使用<code>myadaper?.notifyItemInserted(data.size-1)</code>报错越界</p><p>使用<code>myadaper!!.notifyItemChanged(data.size-1)</code>反而正常</p></li></ul><blockquote><p>猜想，data数组更新了，但是适配器里的数组还保存着原来的数据，调用notify函数后才更新对应位置数据</p><p>所以主页面里按data空数组下标从0开始插入反而报错</p><p><strong>报错日志</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs verilog">D/TAG----&gt;得到第 <span class="hljs-number">0</span> 个图片链接：: https:<span class="hljs-comment">//24.media.tumblr.com/tumblr_lwwcqwNiyE1r0mbi6o1_500.jpg</span><br>D/TAG----&gt;得到第 <span class="hljs-number">1</span> 个图片链接：: https:<span class="hljs-comment">//25.media.tumblr.com/tumblr_ll6oplOJki1qjahcpo1_500.jpg</span><br>D/TAG----&gt;重置了第<span class="hljs-number">1</span> 个图片链接：:             <br>D/TAG----&gt;得到第 <span class="hljs-number">2</span> 个图片链接：: https:<span class="hljs-comment">//25.media.tumblr.com/tumblr_ln7y9yW8hn1qdth8zo1_500.jpg</span><br>D/TAG----&gt;得到第 <span class="hljs-number">3</span> 个图片链接：: https:<span class="hljs-comment">//s3.us-west-2.amazonaws.com/cdn2.thecatapi.com/images/PfA5hN4En.jpg</span><br>D/TAG----&gt;得到第 <span class="hljs-number">4</span> 个图片链接：: https:<span class="hljs-comment">//s3.us-west-2.amazonaws.com/cdn2.thecatapi.com/images/1XJ21J4EE.jpg</span><br>D/TAG----&gt;得到第 <span class="hljs-number">5</span> 个图片链接：: https:<span class="hljs-comment">//s3.us-west-2.amazonaws.com/cdn2.thecatapi.com/images/2B3n7I5u2.jpg</span><br>D/TAG----&gt;得到第 <span class="hljs-number">6</span> 个图片链接：: https:<span class="hljs-comment">//s3.us-west-2.amazonaws.com/cdn2.thecatapi.com/images/0xvhPJ8pd.jpg</span><br>D/TAG----&gt;得到第 <span class="hljs-number">7</span> 个图片链接：: https:<span class="hljs-comment">//s3.us-west-2.amazonaws.com/cdn2.thecatapi.com/images/6X-Rt4SAF.jpg</span><br>D/Tag: 执行了onBindViewHolder<br>D/AndroidRuntime: Shutting down VM<br>E/AndroidRuntime: FATAL EXCEPTION: main<br> Process: com<span class="hljs-variable">.demo</span><span class="hljs-variable">.catws</span>, PID: <span class="hljs-number">23693</span><br> java<span class="hljs-variable">.lang</span><span class="hljs-variable">.IndexOutOfBoundsException</span>: Inconsistency detected. Invalid item position <span class="hljs-number">7</span>(offset:<span class="hljs-number">8</span>)<span class="hljs-variable">.state</span>:<span class="hljs-number">8</span> androidx<span class="hljs-variable">.recyclerview</span><span class="hljs-variable">.widget</span><span class="hljs-variable">.RecyclerView</span>&#123;abf2cbd VFED..... .....<span class="hljs-variable">.ID</span> -<span class="hljs-number">72</span>,<span class="hljs-number">246</span>-<span class="hljs-number">1155</span>,<span class="hljs-number">2109</span> #<span class="hljs-number">7</span>f070083 app:id/recycle&#125;, <br></code></pre></td></tr></table></figure></blockquote><ul><li><p>初始化的<code>recycleview</code>传入空数组时也不能使用<code>insert</code>，但可以使用<code>changed</code> 。。。。</p></li><li><p><strong>报错日志</strong></p></li><li><p>&#96;&#96;&#96;verilog<br>D&#x2F;TAG—-&gt;得到第 0 个图片链接：: <a href="https://26.media.tumblr.com/Jjkybd3nSk1fx3xfOQ0aNJawo1_500.jpg">https://26.media.tumblr.com/Jjkybd3nSk1fx3xfOQ0aNJawo1_500.jpg</a><br>D&#x2F;TAG—-&gt;得到第 1 个图片链接：: <a href="https://24.media.tumblr.com/tumblr_lhc5exQHCr1qgnva2o1_500.jpg">https://24.media.tumblr.com/tumblr_lhc5exQHCr1qgnva2o1_500.jpg</a><br>D&#x2F;TAG—-&gt;得到第 2 个图片链接：: <a href="https://24.media.tumblr.com/tumblr_m46gb0Yz7l1qz6rxuo1_500.jpg">https://24.media.tumblr.com/tumblr_m46gb0Yz7l1qz6rxuo1_500.jpg</a><br>D&#x2F;TAG—-&gt;得到第 3 个图片链接：: <a href="https://24.media.tumblr.com/tumblr_m5b8gqPHsN1qenqklo1_r1_500.jpg">https://24.media.tumblr.com/tumblr_m5b8gqPHsN1qenqklo1_r1_500.jpg</a><br>D&#x2F;TAG—-&gt;重置了第3 个图片链接：:<br>D&#x2F;TAG—-&gt;得到第 4 个图片链接：: <a href="https://25.media.tumblr.com/tumblr_m6fj9jObek1qzbxjgo1_500.jpg">https://25.media.tumblr.com/tumblr_m6fj9jObek1qzbxjgo1_500.jpg</a><br>D&#x2F;TAG—-&gt;重置了第4 个图片链接：:<br><a href="https://s3.us-west-2.amazonaws.com/cdn2.thecatapi.com/images/L6X35YZPT.jpg">https://s3.us-west-2.amazonaws.com/cdn2.thecatapi.com/images/L6X35YZPT.jpg</a><br>D&#x2F;TAG—-&gt;得到第 5 个图片链接：: <a href="https://s3.us-west-2.amazonaws.com/cdn2.thecatapi.com/images/L6X35YZPT.jpg">https://s3.us-west-2.amazonaws.com/cdn2.thecatapi.com/images/L6X35YZPT.jpg</a><br>D&#x2F;TAG—-&gt;得到第 6 个图片链接：: <a href="https://s3.us-west-2.amazonaws.com/cdn2.thecatapi.com/images/R1_Oy4xPh.jpg">https://s3.us-west-2.amazonaws.com/cdn2.thecatapi.com/images/R1_Oy4xPh.jpg</a><br>D&#x2F;TAG—-&gt;得到第 7 个图片链接：: <a href="https://s3.us-west-2.amazonaws.com/cdn2.thecatapi.com/images/HJiePCL8P.jpg">https://s3.us-west-2.amazonaws.com/cdn2.thecatapi.com/images/HJiePCL8P.jpg</a><br>D&#x2F;TAG: 进入onCreateViewHolder<br>D&#x2F;Tag: 执行了onBindViewHolder<br>&#x2F;&#x2F;…<br>D&#x2F;Tag: 执行了onBindViewHolder<br>I&#x2F;chatty: uid&#x3D;10161(com.demo.catws) identical 3 lines<br>D&#x2F;AndroidRuntime: Shutting down VM<br>E&#x2F;AndroidRuntime: FATAL EXCEPTION: main<br>Process: com.demo.catws, PID: 24957<br>java.lang.IndexOutOfBoundsException: Inconsistency detected. Invalid view holder adapter positionMyViewHolder{a05aa7 position&#x3D;12 id&#x3D;-1, oldPos&#x3D;7, pLpos:7 scrap [attachedScrap] tmpDetached not recyclable(1) no parent} androidx.recyclerview.widget.RecyclerView{3aa67fe VFED….. ……ID -72,246-1155,2109 #7f070083 app:id&#x2F;recycle}</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br>  <br><br>### 业务代码<br><br>```kotlin<br><span class="hljs-comment">//点击函数</span><br><span class="hljs-keyword">fun</span> look<span class="hljs-constructor">Cat(<span class="hljs-params">v</span>:View)</span> = <span class="hljs-constructor">Thread()</span>&#123;<br>        <span class="hljs-keyword">val</span> url=<span class="hljs-string">&quot;https://api.thecatapi.com/api/images/get?format=xml&amp;size=med&amp;results_per_page=8&quot;</span><br>        <span class="hljs-keyword">val</span> xmlString = <span class="hljs-constructor">URL(<span class="hljs-params">url</span>)</span>.read<span class="hljs-constructor">Text()</span><br>        <span class="hljs-keyword">val</span> parserFactory: XmlPullParserFactory = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">XmlPullParserFactory</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span><br>        <span class="hljs-keyword">val</span> parser: XmlPullParser = parserFactory.<span class="hljs-keyword">new</span><span class="hljs-constructor">PullParser()</span><br>        parser.set<span class="hljs-constructor">Feature(XmlPullParser.FEATURE_PROCESS_NAMESPACES, <span class="hljs-params">true</span>)</span><br>        parser.set<span class="hljs-constructor">Input(StringReader(<span class="hljs-params">xmlString</span>)</span>)<br>        var tag: String?<br>        var text = <span class="hljs-string">&quot;&quot;</span><br>        var count=<span class="hljs-number">0</span>;<br>        data.clear<span class="hljs-literal">()</span><br>        var <span class="hljs-built_in">bytes</span>:ByteArray?<br>        var event = parser.eventType<br>        <span class="hljs-keyword">while</span> (event != XmlPullParser.END_DOCUMENT) &#123;<br>            tag = parser.name<br>            <span class="hljs-keyword">when</span> (event) &#123;<br>                XmlPullParser.TEXT -&gt; text = parser.text<br>                XmlPullParser.END_TAG -&gt; <span class="hljs-keyword">when</span> (tag) &#123;<br>                    <span class="hljs-string">&quot;url&quot;</span> -&gt; &#123;<br>                        <span class="hljs-comment">//把资源链接压进资源数组</span><br>                        <span class="hljs-comment">//图片链接处理</span><br>                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Log</span>.</span></span>d(<span class="hljs-string">&quot;TAG----&gt;得到第 $&#123;data.size-1&#125; 个图片链接：&quot;</span>, text)<br>                        data.add(text)<br>                        runOnUiThread &#123;<br><br>                            <span class="hljs-comment">//myadaper?.notifyItemInserted(data.size-1)</span><br>                            <span class="hljs-comment">//此处使用提醒插入报错，使用提醒改变正常运行</span><br>                            myadaper!!.notify<span class="hljs-constructor">ItemChanged(<span class="hljs-params">data</span>.<span class="hljs-params">size</span>-1)</span><br>                            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Log</span>.</span></span>d(<span class="hljs-string">&quot;TAG----&gt;重置了 $&#123;data.size-1&#125; 个图片链接：&quot;</span>, text)<br><br>                        &#125;<br>                        <br>                      <br>                    &#125;<br>                &#125;<br>            &#125;<br>            event = parser.next<span class="hljs-literal">()</span><br>        &#125;<br><br>    &#125;.start<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//图片加载函数</span><br><span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onBindViewHolder</span><span class="hljs-params">(holder: <span class="hljs-type">MyViewHolder</span>, position: <span class="hljs-type">Int</span>)</span></span> &#123;<br>        Log.d(<span class="hljs-string">&quot;Tag&quot;</span>,<span class="hljs-string">&quot;执行了onBindViewHolder&quot;</span>)<br><br>        Glide.with(myContext).load(items[position]).into(holder.imgview)<br><br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="1-0版本：解析获取xml中的一个图片链接并显示"><a href="#1-0版本：解析获取xml中的一个图片链接并显示" class="headerlink" title="1.0版本：解析获取xml中的一个图片链接并显示"></a>1.0版本：解析获取xml中的一个图片链接并显示</h2><blockquote><p>未使用布局及图片加载库</p></blockquote><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><blockquote><ul><li>点击按钮向api接口请求xml数据</li><li>当从xml中解析出图片url地址后左上角显示：<br>“猫猫图正在向您走来”</li><li>从url中读取到图片后，显示图片链接与图片到ui上</li></ul></blockquote><p><img src="https://sheepnote.oss-cn-shenzhen.aliyuncs.com/20201006/20201124200225.png" alt="image-20201124200224064"></p><h3 id="业务代码"><a href="#业务代码" class="headerlink" title="业务代码"></a>业务代码</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">lookCat</span><span class="hljs-params">(v:<span class="hljs-type">View</span>)</span></span> = Thread()&#123;<br>        <span class="hljs-keyword">val</span> url=<span class="hljs-string">&quot;https://api.thecatapi.com/api/images/get?format=xml&amp;size=med&amp;results_per_page=1&quot;</span><br>        <span class="hljs-comment">//读取并格式化返回的xml</span><br>        <span class="hljs-keyword">val</span> xmlString = URL(url).readText()<br>        <span class="hljs-keyword">val</span> parserFactory: XmlPullParserFactory = XmlPullParserFactory.newInstance()<br>        <span class="hljs-keyword">val</span> parser: XmlPullParser = parserFactory.newPullParser()<br>        parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES, <span class="hljs-literal">true</span>)<br>        parser.setInput(StringReader(xmlString))<br>        <span class="hljs-keyword">var</span> tag: String?<br>        <span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">var</span> bytes:ByteArray?<br>        <span class="hljs-keyword">var</span> event = parser.eventType<br>        <span class="hljs-comment">//开始解析返回的xml，此处因为url设置results_per_page=1，返回的xml只有一个image节点即一张图片链接</span><br>        <span class="hljs-keyword">while</span> (event != XmlPullParser.END_DOCUMENT) &#123;<br>            tag = parser.name<br>            <span class="hljs-keyword">when</span> (event) &#123;<br>                XmlPullParser.TEXT -&gt; text = parser.text<br>                XmlPullParser.END_TAG -&gt; <span class="hljs-keyword">when</span> (tag) &#123;<br>                    <span class="hljs-string">&quot;url&quot;</span> -&gt;&#123;<br>                        imgurl=text<br>                        timestart.text=<span class="hljs-string">&quot;猫猫图正在向您走来！&quot;</span><br>                        Log.d(<span class="hljs-string">&quot;MainActivity&quot;</span>,<span class="hljs-string">&quot;已读取完图片链接 :<span class="hljs-variable">$imgurl</span> &quot;</span>)<br>                        bytes = URL(text).readBytes()<br>                        runOnUiThread&#123;<br>                            <span class="hljs-keyword">var</span> text=imgurl<br>                            textView.text=text<br>                            <span class="hljs-keyword">val</span> bitmap = BitmapFactory.decodeByteArray(bytes, <span class="hljs-number">0</span>, bytes.size)<br>                            Log.d(<span class="hljs-string">&quot;MainActivity&quot;</span>,<span class="hljs-string">&quot;已读取完图片字节文件：<span class="hljs-variable">$imgurl</span> &quot;</span>)<br>                            imageView.setImageBitmap(bitmap)<br>                            imageView.isEnabled = <span class="hljs-literal">true</span><br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">//当xml存在多个子节点时生效，此时暂不生效</span><br>            event = parser.next()<br>        &#125;<br><br>    &#125;.start()<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;安卓实验-随机猫图&quot;&gt;&lt;a href=&quot;#安卓实验-随机猫图&quot; class=&quot;headerlink&quot; title=&quot;安卓实验:随机猫图&quot;&gt;&lt;/a&gt;安卓实验:随机猫图&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt; 安卓实验:随机猫图:cat:&lt;</summary>
      
    
    
    
    <category term="demo" scheme="https://darksheep404.github.io/categories/demo/"/>
    
    
    <category term="demo" scheme="https://darksheep404.github.io/tags/demo/"/>
    
    <category term="java" scheme="https://darksheep404.github.io/tags/java/"/>
    
    <category term="kotlin" scheme="https://darksheep404.github.io/tags/kotlin/"/>
    
    <category term="Android" scheme="https://darksheep404.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>分享:From Java To Kotlin</title>
    <link href="https://darksheep404.github.io/2020/11/19/From%20Java%20To%20Kotlin/"/>
    <id>https://darksheep404.github.io/2020/11/19/From%20Java%20To%20Kotlin/</id>
    <published>2020-11-19T15:20:18.000Z</published>
    <updated>2025-05-27T11:20:30.779Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p><a href="https://github.com/MindorksOpenSource/from-java-to-kotlin/blob/master/README-ZH.md">From Java To Kotlin</a></p><h2 id="打印日志"><a href="#打印日志" class="headerlink" title="打印日志"></a>打印日志</h2><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.print(<span class="hljs-string">&quot;Amit Shekhar&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;Amit Shekhar&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>Kotlin</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">print(<span class="hljs-string">&quot;Amit Shekhar&quot;</span>)<br>println(<span class="hljs-string">&quot;Amit Shekhar&quot;</span>)<br></code></pre></td></tr></table></figure><hr><h2 id="常量与变量"><a href="#常量与变量" class="headerlink" title="常量与变量"></a>常量与变量</h2><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Amit Shekhar&quot;</span>;<br><span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Amit Shekhar&quot;</span>;<br></code></pre></td></tr></table></figure><ul><li>Kotlin</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;Amit Shekhar&quot;</span><br><span class="hljs-keyword">val</span> name = <span class="hljs-string">&quot;Amit Shekhar&quot;</span><br></code></pre></td></tr></table></figure><hr><h2 id="null声明"><a href="#null声明" class="headerlink" title="null声明"></a>null声明</h2><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String otherName;<br>otherName = <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure><ul><li>Kotlin</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">var</span> otherName : String?<br>otherName = <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><hr><h2 id="空判断"><a href="#空判断" class="headerlink" title="空判断"></a>空判断</h2><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (text != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> text.length();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Kotlin</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">text?.let &#123;<br>    <span class="hljs-keyword">val</span> length = text.length<br>&#125;<br><span class="hljs-comment">// or simply</span><br><span class="hljs-keyword">val</span> length = text?.length<br></code></pre></td></tr></table></figure><hr><h2 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h2><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">firstName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Amit&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">lastName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Shekhar&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;My name is: &quot;</span> + firstName + <span class="hljs-string">&quot; &quot;</span> + lastName;<br></code></pre></td></tr></table></figure><ul><li>Kotlin</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> firstName = <span class="hljs-string">&quot;Amit&quot;</span><br><span class="hljs-keyword">val</span> lastName = <span class="hljs-string">&quot;Shekhar&quot;</span><br><span class="hljs-keyword">val</span> message = <span class="hljs-string">&quot;My name is: <span class="hljs-variable">$firstName</span> <span class="hljs-variable">$lastName</span>&quot;</span><br></code></pre></td></tr></table></figure><hr><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;First Line\n&quot;</span> +<br>              <span class="hljs-string">&quot;Second Line\n&quot;</span> +<br>              <span class="hljs-string">&quot;Third Line&quot;</span>;<br></code></pre></td></tr></table></figure><ul><li>Kotlin</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> text = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        |First Line</span><br><span class="hljs-string">        |Second Line</span><br><span class="hljs-string">        |Third Line</span><br><span class="hljs-string">        &quot;&quot;&quot;</span>.trimMargin()<br></code></pre></td></tr></table></figure><hr><h2 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h2><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> x &gt; <span class="hljs-number">5</span> ? <span class="hljs-string">&quot;x &gt; 5&quot;</span> : <span class="hljs-string">&quot;x &lt;= 5&quot;</span>;<br></code></pre></td></tr></table></figure><ul><li>Kotlin</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> text = <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">5</span>)<br>              <span class="hljs-string">&quot;x &gt; 5&quot;</span><br>           <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;x &lt;= 5&quot;</span><br></code></pre></td></tr></table></figure><hr><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><ul><li>java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">andResult</span>  <span class="hljs-operator">=</span> a &amp; b;<br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">orResult</span>   <span class="hljs-operator">=</span> a | b;<br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">xorResult</span>  <span class="hljs-operator">=</span> a ^ b;<br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">rightShift</span> <span class="hljs-operator">=</span> a &gt;&gt; <span class="hljs-number">2</span>;<br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">leftShift</span>  <span class="hljs-operator">=</span> a &lt;&lt; <span class="hljs-number">2</span>;<br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">unsignedRightShift</span> <span class="hljs-operator">=</span> a &gt;&gt;&gt; <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><ul><li>Kotlin</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> andResult  = a and b<br><span class="hljs-keyword">val</span> orResult   = a or b<br><span class="hljs-keyword">val</span> xorResult  = a xor b<br><span class="hljs-keyword">val</span> rightShift = a shr <span class="hljs-number">2</span><br><span class="hljs-keyword">val</span> leftShift  = a shl <span class="hljs-number">2</span><br><span class="hljs-keyword">val</span> unsignedRightShift = a ushr <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><hr><h2 id="类型判断和转换-声明式"><a href="#类型判断和转换-声明式" class="headerlink" title="类型判断和转换 (声明式)"></a>类型判断和转换 (声明式)</h2><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (object <span class="hljs-keyword">instanceof</span> Car) &#123;<br>&#125;<br><span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> (Car) object;<br></code></pre></td></tr></table></figure><ul><li>Kotlin</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">object</span> <span class="hljs-keyword">is</span> Car) &#123;<br>&#125;<br><span class="hljs-keyword">var</span> car = <span class="hljs-keyword">object</span> <span class="hljs-keyword">as</span> Car<br></code></pre></td></tr></table></figure><hr><h2 id="类型判断和转换-隐式"><a href="#类型判断和转换-隐式" class="headerlink" title="类型判断和转换 (隐式)"></a>类型判断和转换 (隐式)</h2><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (object <span class="hljs-keyword">instanceof</span> Car) &#123;<br>   <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> (Car) object;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Kotlin</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">object</span> <span class="hljs-keyword">is</span> Car) &#123;<br>   <span class="hljs-keyword">var</span> car = <span class="hljs-keyword">object</span> <span class="hljs-comment">// 聪明的转换</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="多重条件"><a href="#多重条件" class="headerlink" title="多重条件"></a>多重条件</h2><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">0</span> &amp;&amp; score &lt;= <span class="hljs-number">300</span>) &#123; &#125;<br></code></pre></td></tr></table></figure><ul><li>Kotlin</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">if</span> (score <span class="hljs-keyword">in</span> <span class="hljs-number">0.</span><span class="hljs-number">.300</span>) &#123; &#125;<br></code></pre></td></tr></table></figure><hr><h2 id="更灵活的case语句"><a href="#更灵活的case语句" class="headerlink" title="更灵活的case语句"></a>更灵活的case语句</h2><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> <span class="hljs-comment">// some score;</span><br>String grade;<br><span class="hljs-keyword">switch</span> (score) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>        grade = <span class="hljs-string">&quot;Excellent&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>        grade = <span class="hljs-string">&quot;Good&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>        grade = <span class="hljs-string">&quot;OK&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        grade = <span class="hljs-string">&quot;Fail&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        grade = <span class="hljs-string">&quot;Fail&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Kotlin</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">var</span> score = <span class="hljs-comment">// some score</span><br><span class="hljs-keyword">var</span> grade = <span class="hljs-keyword">when</span> (score) &#123;<br>    <span class="hljs-number">9</span>, <span class="hljs-number">10</span> -&gt; <span class="hljs-string">&quot;Excellent&quot;</span><br>    <span class="hljs-keyword">in</span> <span class="hljs-number">6.</span><span class="hljs-number">.8</span> -&gt; <span class="hljs-string">&quot;Good&quot;</span><br>    <span class="hljs-number">4</span>, <span class="hljs-number">5</span> -&gt; <span class="hljs-string">&quot;OK&quot;</span><br>    <span class="hljs-keyword">in</span> <span class="hljs-number">1.</span><span class="hljs-number">.3</span> -&gt; <span class="hljs-string">&quot;Fail&quot;</span><br>    <span class="hljs-keyword">else</span> -&gt; <span class="hljs-string">&quot;Fail&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span> ; i++) &#123; &#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span> ; i++) &#123; &#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>; i &gt;= <span class="hljs-number">0</span> ; i--) &#123; &#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span> ; i+=<span class="hljs-number">2</span>) &#123; &#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>; i &gt;= <span class="hljs-number">0</span> ; i-=<span class="hljs-number">2</span>) &#123; &#125;<br><br><span class="hljs-keyword">for</span> (String item : collection) &#123; &#125;<br><br><span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; entry: map.entrySet()) &#123; &#125;<br></code></pre></td></tr></table></figure><ul><li>Kotlin</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">1.</span><span class="hljs-number">.10</span>) &#123; &#125;<br><br><span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">1</span> until <span class="hljs-number">10</span>) &#123; &#125;<br><br><span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">10</span> downTo <span class="hljs-number">0</span>) &#123; &#125;<br><br><span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">1.</span><span class="hljs-number">.10</span> step <span class="hljs-number">2</span>) &#123; &#125;<br><br><span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">10</span> downTo <span class="hljs-number">0</span> step <span class="hljs-number">2</span>) &#123; &#125;<br><br><span class="hljs-keyword">for</span> (item <span class="hljs-keyword">in</span> collection) &#123; &#125;<br><br><span class="hljs-keyword">for</span> ((key, value) <span class="hljs-keyword">in</span> map) &#123; &#125;<br></code></pre></td></tr></table></figure><hr><h2 id="更方便的集合操作"><a href="#更方便的集合操作" class="headerlink" title="更方便的集合操作"></a>更方便的集合操作</h2><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> List&lt;Integer&gt; listOfNumber = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br><br><span class="hljs-keyword">final</span> Map&lt;Integer, String&gt; keyValue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer, String&gt;();<br>map.put(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Amit&quot;</span>);<br>map.put(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;Ali&quot;</span>);<br>map.put(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;Mindorks&quot;</span>);<br><br><span class="hljs-comment">// Java 9</span><br><span class="hljs-keyword">final</span> List&lt;Integer&gt; listOfNumber = List.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br><br><span class="hljs-keyword">final</span> Map&lt;Integer, String&gt; keyValue = Map.of(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Amit&quot;</span>,<br>                                             <span class="hljs-number">2</span>, <span class="hljs-string">&quot;Ali&quot;</span>,<br>                                             <span class="hljs-number">3</span>, <span class="hljs-string">&quot;Mindorks&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>Kotlin</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> listOfNumber = listOf(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br><span class="hljs-keyword">val</span> keyValue = mapOf(<span class="hljs-number">1</span> to <span class="hljs-string">&quot;Amit&quot;</span>,<br>                     <span class="hljs-number">2</span> to <span class="hljs-string">&quot;Ali&quot;</span>,<br>                     <span class="hljs-number">3</span> to <span class="hljs-string">&quot;Mindorks&quot;</span>)<br></code></pre></td></tr></table></figure><hr><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Java 7 and below</span><br><span class="hljs-keyword">for</span> (Car car : cars) &#123;<br>  System.out.println(car.speed);<br>&#125;<br><br><span class="hljs-comment">// Java 8+</span><br>cars.forEach(car -&gt; System.out.println(car.speed));<br><br><span class="hljs-comment">// Java 7 and below</span><br><span class="hljs-keyword">for</span> (Car car : cars) &#123;<br>  <span class="hljs-keyword">if</span> (car.speed &gt; <span class="hljs-number">100</span>) &#123;<br>    System.out.println(car.speed);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// Java 8+</span><br>cars.stream().filter(car -&gt; car.speed &gt; <span class="hljs-number">100</span>).forEach(car -&gt; System.out.println(car.speed));<br></code></pre></td></tr></table></figure><ul><li>Kotlin</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">cars.forEach &#123;<br>    println(it.speed)<br>&#125;<br><br>cars.filter &#123; it.speed &gt; <span class="hljs-number">100</span> &#125;<br>      .forEach &#123; println(it.speed)&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h2><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">doSomething</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-comment">// logic here</span><br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">doSomething</span><span class="hljs-params">(<span class="hljs-type">int</span>... numbers)</span> &#123;<br>   <span class="hljs-comment">// logic here</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Kotlin</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">doSomething</span><span class="hljs-params">()</span></span> &#123;<br>   <span class="hljs-comment">// logic here</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">doSomething</span><span class="hljs-params">(<span class="hljs-keyword">vararg</span> numbers: <span class="hljs-type">Int</span>)</span></span> &#123;<br>   <span class="hljs-comment">// logic here</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="带返回值的方法"><a href="#带返回值的方法" class="headerlink" title="带返回值的方法"></a>带返回值的方法</h2><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">getScore</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-comment">// logic here</span><br>   <span class="hljs-keyword">return</span> score;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Kotlin</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getScore</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Int</span> &#123;<br>   <span class="hljs-comment">// logic here</span><br>   <span class="hljs-keyword">return</span> score<br>&#125;<br><br><span class="hljs-comment">// as a single-expression function</span><br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getScore</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Int</span> = score<br></code></pre></td></tr></table></figure><hr><h2 id="无结束符号"><a href="#无结束符号" class="headerlink" title="无结束符号"></a>无结束符号</h2><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">getScore</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>    <span class="hljs-comment">// logic here</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * value;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Kotlin</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getScore</span><span class="hljs-params">(value: <span class="hljs-type">Int</span>)</span></span>: <span class="hljs-built_in">Int</span> &#123;<br>   <span class="hljs-comment">// logic here</span><br>   <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * value<br>&#125;<br><br><span class="hljs-comment">// as a single-expression function</span><br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getScore</span><span class="hljs-params">(value: <span class="hljs-type">Int</span>)</span></span>: <span class="hljs-built_in">Int</span> = <span class="hljs-number">2</span> * value<br></code></pre></td></tr></table></figure><hr><h2 id="constructor-构造器"><a href="#constructor-构造器" class="headerlink" title="constructor 构造器"></a>constructor 构造器</h2><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Utils</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Utils</span><span class="hljs-params">()</span> &#123; <br>      <span class="hljs-comment">// This utility class is not publicly instantiable </span><br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getScore</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * value;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Kotlin</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Utils</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">constructor</span></span>() &#123;<br><br>    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> &#123;<br>    <br>        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getScore</span><span class="hljs-params">(value: <span class="hljs-type">Int</span>)</span></span>: <span class="hljs-built_in">Int</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * value<br>        &#125;<br>        <br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// another way</span><br><br><span class="hljs-keyword">object</span> Utils &#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getScore</span><span class="hljs-params">(value: <span class="hljs-type">Int</span>)</span></span>: <span class="hljs-built_in">Int</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * value<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="Get-Set-构造器"><a href="#Get-Set-构造器" class="headerlink" title="Get Set 构造器"></a>Get Set 构造器</h2><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Developer</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Developer</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-type">Developer</span> <span class="hljs-variable">developer</span> <span class="hljs-operator">=</span> (Developer) o;<br><br>        <span class="hljs-keyword">if</span> (age != developer.age) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> name != <span class="hljs-literal">null</span> ? name.equals(developer.name) : developer.name == <span class="hljs-literal">null</span>;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> name != <span class="hljs-literal">null</span> ? name.hashCode() : <span class="hljs-number">0</span>;<br>        result = <span class="hljs-number">31</span> * result + age;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Developer&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Kotlin</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">data</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Developer</span></span>(<span class="hljs-keyword">val</span> name: String, <span class="hljs-keyword">val</span> age: <span class="hljs-built_in">Int</span>)<br></code></pre></td></tr></table></figure><hr><h2 id="原型扩展"><a href="#原型扩展" class="headerlink" title="原型扩展"></a>原型扩展</h2><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Utils</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Utils</span><span class="hljs-params">()</span> &#123; <br>      <span class="hljs-comment">// This utility class is not publicly instantiable </span><br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">triple</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">3</span> * value;<br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> Utils.triple(<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><ul><li>Kotlin</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-built_in">Int</span>.<span class="hljs-title">triple</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Int</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span> * <span class="hljs-number">3</span><br>&#125;<br><br><span class="hljs-keyword">var</span> result = <span class="hljs-number">3.</span>triple()<br></code></pre></td></tr></table></figure><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Direction</span> &#123;<br>        NORTH(<span class="hljs-number">1</span>),<br>        SOUTH(<span class="hljs-number">2</span>),<br>        WEST(<span class="hljs-number">3</span>),<br>        EAST(<span class="hljs-number">4</span>);<br><br>        <span class="hljs-type">int</span> direction;<br><br>        Direction(<span class="hljs-type">int</span> direction) &#123;<br>            <span class="hljs-built_in">this</span>.direction = direction;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getDirection</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> direction;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li>Kotlin</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">enum</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Direction</span></span>(<span class="hljs-keyword">val</span> direction: <span class="hljs-built_in">Int</span>) &#123;<br>    NORTH(<span class="hljs-number">1</span>),<br>    SOUTH(<span class="hljs-number">2</span>),<br>    WEST(<span class="hljs-number">3</span>),<br>    EAST(<span class="hljs-number">4</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/MindorksOpenSource/from-java-to-kotlin/blob/master/README-ZH.md&quot;&gt;From Java To Kotlin&lt;/a&gt;&lt;/p&gt;
&lt;h2</summary>
      
    
    
    
    <category term="分享" scheme="https://darksheep404.github.io/categories/%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="指南" scheme="https://darksheep404.github.io/tags/%E6%8C%87%E5%8D%97/"/>
    
    <category term="java" scheme="https://darksheep404.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>分享：QQ被封后还能正常使用QQ邮箱的方法</title>
    <link href="https://darksheep404.github.io/2020/11/19/QQ%E8%A2%AB%E5%B0%81%E5%90%8E%E6%AD%A3%E5%B8%B8%E4%BD%BF%E7%94%A8QQ%E9%82%AE%E7%AE%B1%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://darksheep404.github.io/2020/11/19/QQ%E8%A2%AB%E5%B0%81%E5%90%8E%E6%AD%A3%E5%B8%B8%E4%BD%BF%E7%94%A8QQ%E9%82%AE%E7%AE%B1%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2020-11-19T15:20:18.000Z</published>
    <updated>2025-05-27T11:20:30.779Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分享：QQ被封后还能正常使用QQ邮箱的方法"><a href="#分享：QQ被封后还能正常使用QQ邮箱的方法" class="headerlink" title="分享：QQ被封后还能正常使用QQ邮箱的方法"></a>分享：QQ被封后还能正常使用QQ邮箱的方法</h2><p> <strong>前几天qq莫名奇妙出现bug，错误封了好多人QQ号，造成严重的学习工作事故</strong></p><blockquote><p>所以我这里转帖一下，能让QQ被封后正常使用QQ邮箱的方法</p><p>QQ被封了会导致所有QQ登录的产品都无法使用，但是QQ邮箱</p><p>对大部分人来说都是工作邮箱，由于QQ被封导致无法收发邮件和登录网址会严重影响日常工作。</p><p>作者也是很伤脑筋，其实也没发什么恶意言论，QQ就被封</p></blockquote><p><strong>注：这两种方法都需要被封前提前设置，被封后才能生效！</strong></p><h2 id="解决方法一：善用邮件转发"><a href="#解决方法一：善用邮件转发" class="headerlink" title="解决方法一：善用邮件转发"></a>解决方法一：善用邮件转发</h2><blockquote><p>邮件转发，正如其字面意思，将收到的邮件转发给另一个邮箱。</p><p>邮件转发作为邮件系统的基本功能，为了方便客户邮件备份，一般的邮件系统都会有带邮件转发的功能。</p><p>同样，QQ邮箱也有此功能，开启之后，就算QQ被封，也不影响其转发。</p><p>所以我们可以通过开启邮件转发来暂时接收邮件。</p><ol><li>登录QQ邮箱，打开<strong>设置</strong>，在<strong>常规</strong>选项里找到<strong>自动转发</strong></li><li>设置好接收邮箱,转发后操作,最后保存即可.</li></ol><p>作者建议设置一个163或者其他可以用手机号登录的邮箱,这样平时不用管它,账号出问题之后用手机登录163邮箱就可以正常接收邮件了</p><p>在<strong>设置</strong> <strong>收信规则</strong> 里还可以进行高阶操作,这里作者不在赘述.</p></blockquote><h2 id="法二：使用其他客户端登录QQ邮箱"><a href="#法二：使用其他客户端登录QQ邮箱" class="headerlink" title="法二：使用其他客户端登录QQ邮箱"></a>法二：使用其他客户端登录QQ邮箱</h2><blockquote><p><strong>IMAP是什么？</strong><br>IMAP，即<strong>I</strong>nternet <strong>M</strong>essage <strong>A</strong>ccess <strong>P</strong>rotocol（互联网邮件访问协议），您可以通过这种协议从邮件服务器上获取邮件的信息、下载邮件等。IMAP与POP类似，都是一种邮件获取协议。</p><p><strong>IMAP和POP有什么区别？</strong></p><p>POP允许电子邮件客户端下载服务器上的邮件，但是您在电子邮件客户端的操作（如：移动邮件、标记已读等），这是不会反馈到服务器上的，比如：您通过电子邮件客户端收取了QQ邮箱中的3封邮件并移动到了其他文件夹，这些移动动作是不会反馈到服务器上的，也就是说，QQ邮箱服务器上的这些邮件是没有同时被移动的  。但是IMAP就不同了，电子邮件客户端的操作都会反馈到服务器上，您对邮件进行的操作（如：移动邮件、标记已读等），服务器上的邮件也会做相应的动作。也就是说，IMAP是“双向”的。</p><p>同时，IMAP可以只下载邮件的主题，只有当您真正需要的时候，才会下载邮件的所有内容。</p></blockquote><p><strong>简言之,我们可以通过开启IMAP或POP服务来供其他客户端登录该邮箱,从而实现完全的接发邮件等功能.</strong></p><ol><li><strong>登录QQ邮箱，打开设置，在账户选项里找到POP3&#x2F;IMAP&#x2F;SMTP&#x2F;Exchange&#x2F;CardDAV&#x2F;CalDAV服务</strong></li><li><strong>开启POP3&#x2F;SMTP服务，待验证账号后，会生成一串密码，就可以使用这个密码在其他邮箱进行登录和收发件操作了.</strong></li></ol><p><strong>通常，作者一般在邮箱后台生成授权码保存备用，当账号异常时就把授权码找出来，用其他邮箱客户端登录QQ邮箱来收发邮件．</strong></p><p><a href="https://www.qcgzxw.cn/3117.html">原作者博客链接</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;分享：QQ被封后还能正常使用QQ邮箱的方法&quot;&gt;&lt;a href=&quot;#分享：QQ被封后还能正常使用QQ邮箱的方法&quot; class=&quot;headerlink&quot; title=&quot;分享：QQ被封后还能正常使用QQ邮箱的方法&quot;&gt;&lt;/a&gt;分享：QQ被封后还能正常使用QQ邮箱的方法&lt;/</summary>
      
    
    
    
    <category term="分享" scheme="https://darksheep404.github.io/categories/%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="分享" scheme="https://darksheep404.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
    <category term="环境配置" scheme="https://darksheep404.github.io/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
</feed>
